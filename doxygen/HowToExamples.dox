namespace MR {

/**

\page HowToBasic Examples

This page contains some examples of using MeshLib

\section MRBasedMainFunc Basing your application on MeshLib

First of all you should make `main` function like this
\code
namespace
{
const std::string cAppName = "Your app name";
}

int main( int argc, char** argv )
{
    MR::setupLoggerByDefault();

    // Init the viewer

    auto launchParams = MR::Viewer::parseLaunchParams( argc, argv );
    launchParams.name = cAppName;

    MR::Viewer viewer;
    MR::ViewerSetup viewerSetup;

    viewerSetup.setupBasePlugins( &viewer );
    viewerSetup.setupCommonModifiers( &viewer );
    viewerSetup.setupCommonPlugins( &viewer );
    viewerSetup.setupSettingsManager( &viewer, cAppName );
    viewerSetup.setupConfiguration( &viewer );

    viewer.launch( launchParams );

    return 0;
}
\endcode

Then you should make your plugins, to find how have a look at \ref StatePluginsHelp page

\section CCodeExamples C++ Basic Examples

You can find example project in `MeshLib/source/meshconv`

Following code presents example of loading and saving mesh file

\code
#include <iostream>
#include "MRMesh/MRMeshLoad.h"
#include "MRMesh/MRMeshSave.h"

int main()
{
    std::filesystem::path inFilePath = "mesh.stl";
    auto loadRes = MR::MeshLoad::fromAnySupportedFormat( inFilePath );
    if ( loadRes.has_value() )
    {
	    std::filesystem::path outFilePath = "mesh.ply";
	    auto saveRes = MR::MeshSave::toAnySupportedFormat( loadRes.value(), outFilePath );
	    if ( !saveRes.has_value() )
    		std::cerr << saveRes.error() << "\n";
    }
    else
	    std::cerr << loadRes.error() << "\n";
	return 0;
}
\endcode

\sa \ref MR::MeshLoad
\sa \ref MR::MeshSave

Some examples of mesh modification are presented here

\code
#include "MRMesh/MRMesh.h"
#include "MRMesh/MRMeshLoad.h"
#include "MRMesh/MRMeshRelax.h"
#include "MRMesh/MRMeshSubdivide.h"
#include "MRMesh/MRAffineXf3.h"

int main()
{
    // load mesh
    MR::Mesh mesh = MR::MeshLoad::fromAnySupportedFormat( "mesh.stl" ).value();

    // relax mesh (5 iterations)
    MR::relax( mesh, {{5}} );

    // subdivide mesh
    MR::SubdivideSettings props;
    props.maxDeviationAfterFlip = 0.5f;
    MR::subdivideMesh( mesh, props );

    // rotate mesh
    MR::AffineXf3f rotationXf = MR::AffineXf3f::linear( MR::Matrix3f::rotation( MR::Vector3f::plusZ(), MR::PI_F*0.5f ) );
    mesh.transform( rotationXf );

    return 0;
}
\endcode

\sa \ref MR::relax
\sa \ref MR::subdivideMesh
\sa \ref MR::Mesh

Export example of points and triangles from mesh (e.g. for rendering)

\code
#include "MRMesh/MRMesh.h"
#include "MRMesh/MRCube.h"

int main()
{
    // create some mesh
    MR::Mesh mesh = MR::makeCube();

    // all vertices of valid triangles
    const std::vector<std::array<MR::VertId, 3>> triangles = mesh.topology.getAllTriVerts();

    // all point coordinates
    const std::vector<MR::Vector3f> & points =  mesh.points.vec_;
    // triangle vertices as tripples of ints (pointing to elements in points vector)
    const int * vertexTripples = reinterpret_cast<const int*>( triangles.data() );

    return 0;
}
\endcode

\section PythonCodeExamples Python Basic Examples

In this section we provide the same examples but with python code\n
Load and save example:
\code
import meshlib.mrmeshpy as mrmeshpy

try:
    mesh = mrmeshpy.loadMesh(mrmeshpy.Path("mesh.stl"))
except ValueError as e:
    print(e)

mrmeshpy.saveMesh(mesh, mrmeshpy.Path("mesh.ply"))
\endcode

Using numpy to create mesh and get back its primitives
\code
import meshlib.mrmeshpy as mrmeshpy
import meshlib.mrmeshnumpy as mrmeshnumpy

faces = np.ndarray(shape=(2,3), dtype=np.int32, buffer=np.array([[0,1,2],[2,3,0]], dtype=np.int32))

# mrmesh uses float32 for vertex coordinates
# however, you could also use float64
verts = np.ndarray(shape=(4,3), dtype=np.float32, buffer=np.array([[0.0,0.0,0.0],[1.0,0.0,0.0],[1.0,1.0,0.0],[0.0,1.0,0.0]], dtype=np.float32))

mesh = mrmeshnumpy.meshFromFacesVerts(faces, verts)

# some mesh manipulations

outVerts = mrmeshnumpy.getNumpyVerts(mesh)
outFaces = mrmeshnumpy.getNumpyFaces(mesh.topology)
\endcode

Mesh modification examples
\code
import meshlib.mrmeshpy as mrmeshpy
expectedMesh = mrmeshpy.loadMesh(mrmeshpy.Path("mesh.stl"))
assert(expectedMesh.has_value())
mesh = expectedMesh.value()

relaxParams = mrmeshpy.MeshRelaxParams()
relaxParams.iterations = 5
mrmeshpy.relax(mesh, relaxParams)

props = mrmeshpy.SubdivideSettings()
props.maxDeviationAfterFlip = 0.5
mrmeshpy.subdivideMesh(mesh,props)

plusZ = mrmeshpy.Vector3f()
plusZ.z = 1.0
rotationXf = mrmeshpy.AffineXf3f.linear( mrmeshpy.Matrix3f.rotation( plusZ, 3.1415*0.5 ) )
mesh.transform(rotationXf)
\endcode

Simple triangulation
\code
from meshlib import mrmeshpy as mm
from meshlib import mrmeshnumpy as mn
import numpy as np

u, v = np.mgrid[0:2 * np.pi:100j, 0:np.pi:100j]
x = np.cos(u) * np.sin(v)
y = np.sin(u) * np.sin(v)
z = np.cos(v)

# Prepare for MeshLib PointCloud
verts = np.stack((x.flatten(),y.flatten(),z.flatten()),axis=-1).reshape(-1,3)
# Create MeshLib PointCloud from np ndarray
pc = mn.pointCloudFromPoints(verts)
# Remove duplicate points
pc.validPoints = mm.pointUniformSampling(pc,1e-3)
pc.invalidateCaches()

# Triangulate it
triangulatedPC = mm.triangulatePointCloud(pc)

# Fix possible issues
triangulatedPC = mm.offsetMesh(triangulatedPC, 0.0)
\endcode

Tirangulation of regular numpy grid
\code
from meshlib import mrmeshpy as mm
from meshlib import mrmeshnumpy as mn
import numpy as np

u, v = np.mgrid[0:2 * np.pi:50j, 0:np.pi:100j]
x = np.cos(u) * np.sin(v)
y = np.sin(u) * np.sin(v)
z = np.cos(v)
    
mesh = mn.meshFromUVPoints(x,y,z)
\endcode

Using plotly to visualize mesh
\code
from meshlib import mrmeshpy as mm
from meshlib import mrmeshnumpy as mn
import numpy as np
import plotly.graph_objects as go

# load mesh
mesh = mm.loadMesh(mm.Path("mesh.stl"))
# extract numpy arrays
verts = mn.getNumpyVerts(mesh)
faces = mn.getNumpyFaces(mesh.topology)

# prepare data for plotly
vertsT = np.transpose(verts)
facesT = np.transpose(faces)

# draw
fig = go.Figure(data=[
    go.Mesh3d(
        x = vertsT[0],
        y = vertsT[1],
        z = vertsT[2],
        i = facesT[0],
        j = facesT[1],
        k = facesT[2]
    )
])

fig.show()
\endcode
\image html plotly_visualization.png "Plotly visualization" width = 300cm

\sa \ref EmbendedPythonOverview
*/

}