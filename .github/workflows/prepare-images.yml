name: Prepare images

on:
  workflow_call:
    secrets:
      BUILD_MACHINE_TOKEN:
        required: true
      DOCKERHUB_TOKEN:
        required: true
    outputs:
      image_tag:
        description: "linux image for testing"
        value: ${{ jobs.image-select.outputs.image_tag }}
      windows_image_tag:
        description: "windows image for testing"
        value: ${{ jobs.image-select.outputs.windows_image_tag }}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  image-select:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.select-tag.outputs.image_tag}}
      image_path: ${{ steps.set-path.outputs.image_path}}
      need_rebuild: ${{ steps.need-rebuild.outputs.need_rebuild}}
      matrix: ${{ steps.matrix-set.outputs.matrix}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BUILD_MACHINE_TOKEN }}
          submodules: recursive

      - name: Filter paths
        uses: dorny/paths-filter@v2
        id: changes
        with:
          token: ${{ secrets.BUILD_MACHINE_TOKEN }}
          filters: |
            src:
              - '.github/workflows/docker-images.yml'
              - 'docker/**'
              - 'requirements/**'
              - 'scripts/**'
              - 'thirdparty/**'
              - 'MeshLib/requirements/**'
              - 'MeshLib/thirdparty/**'

      - name: Filter Windows paths
        uses: dorny/paths-filter@v2
        id: windows-changes
        with:
          token: ${{ secrets.BUILD_MACHINE_TOKEN }}
          filters: |
            src:
              - 'docker/windowsDockerfile'
              - 'requirements/windows.txt'
              - 'thirdparty/vcpkg/**'
              - 'thirdparty/install.bat'

      - name: Get branch names
        if: ${{steps.changes.outputs.src == 'true'}}
        id: branch-name
        uses: tj-actions/branch-names@v4.9

      # if nothing to rebuild: "latest"
      # else: $branch-name | sed -r 's/[^a-zA-Z0-9._-]+/-/
      # example: fix/mesh -> fix-mesh
      - name: Select image tag
        id: select-tag
        run: |
          echo "::set-output name=image_tag::$([ ${{steps.changes.outputs.src}} == 'true' ] && [ ${{github.event_name}} != 'push' ] && echo "${{steps.branch-name.outputs.current_branch}}" | sed -r 's/[^a-zA-Z0-9._-]+/-/g' || \
          echo "latest")"
          echo "::set-output name=windows_image_tag::$([ ${{steps.windows-changes.outputs.src}} == 'true' ] && [ ${{github.event_name}} != 'push' ] && echo "${{steps.branch-name.outputs.current_branch}}" | sed -r 's/[^a-zA-Z0-9._-]+/-/g' || \
          echo "latest")"

      - name: Set image tag base path
        id: set-path
        run: |
          repo_path=${{github.repository}}
          if [ "${{github.repository}}" == "MeshInspector/MeshInspectorCode" ]; then
            repo_path="MeshRUs/MeshInspector"
          else
            repo_path="MeshRUs/MeshLib"
          fi
          echo "::set-output name=image_path::${repo_path,,}"

      - name: Checking whether to start image rebuild
        id: need-rebuild
        run: echo "::set-output name=need_rebuild::${{steps.changes.outputs.src}}"

        #                    [os,     runner-label ]
        # for MeshLib:       [ubuntu, ubuntu-latest], [fedora, ubuntu-latest], [windows, windows-2019]
        # for MeshInspector: [ubuntu, ubuntu-latest], [fedora, ubuntu-latest], [emscripten, ubuntu-latest]
      - name: Select matrix
        id: matrix-set
        run: |
          echo ${{github.repository}}
          if [ "${{github.repository}}" == "MeshInspector/MeshInspectorCode" ]; then
            echo "::set-output name=matrix::{\"include\":[{\"distribution\":\"ubuntu\", \"os\":\"ubuntu-latest\"},{\"distribution\":\"fedora\", \"os\":\"ubuntu-latest\"},{\"distribution\":\"emscripten\", \"os\":\"ubuntu-latest\"}]}"
          elif [ "${{ steps.windows-changes.outputs.src }}" == "true" ]; then
            echo "::set-output name=matrix::{\"include\":[{\"distribution\":\"ubuntu\", \"os\":\"ubuntu-latest\"},{\"distribution\":\"fedora\", \"os\":\"ubuntu-latest\"},{\"distribution\":\"windows\", \"os\":\"windows-2019\"}]}"
          else
            echo "::set-output name=matrix::{\"include\":[{\"distribution\":\"ubuntu\", \"os\":\"ubuntu-latest\"},{\"distribution\":\"fedora\", \"os\":\"ubuntu-latest\"}]}"
          fi

  image-build-upload:
    needs: [image-select]
    if: ${{ needs.image-select.outputs.need_rebuild == 'true' }}
    timeout-minutes: 180
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJson(needs.image-select.outputs.matrix)}}
    env:
      DOCKERHUB_BASE_PATH: ${{ needs.image-select.outputs.image_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: meshrus
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image
        run: docker build -f ./docker/${{matrix.distribution}}Dockerfile -t ${{env.DOCKERHUB_BASE_PATH}}-${{matrix.distribution}}:${{needs.image-select.outputs.image_tag}} . --progress=plain

      - name: Push image
        run: docker push ${{env.DOCKERHUB_BASE_PATH}}-${{matrix.distribution}}:${{needs.image-select.outputs.image_tag}}
