name: Build Pip Wheels

on:
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  setup:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

  manylinux-pip-build:
    needs: setup
    timeout-minutes: 25
    runs-on: ubuntu-latest
    container:
      image: meshlib/meshlib-ubuntu:latest
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        py-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - py-version: "3.8"
            py-tag: "cp38"
            py-cmd: "python3.8"
          - py-version: "3.9"
            py-tag: "cp39"
            py-cmd: "python3.9"
          - py-version: "3.10"
            py-tag: "cp310"
            py-cmd: "python3.10"
          - py-version: "3.11"
            py-tag: "cp311"
            py-cmd: "python3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Python setup
        if: ${{ matrix.py-version != '3.8' }}
        run: |
          apt -y update && apt -y upgrade && apt -y install software-properties-common
          add-apt-repository -y ppa:deadsnakes/ppa && apt -y install ${{ matrix.py-cmd }}-dev ${{ matrix.py-cmd }}-distutils

      - name: Pip setup
        run: |
          curl -sS https://bootstrap.pypa.io/get-pip.py | ${{ matrix.py-cmd }}
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt 

      - name: Install thirdparty libs
        run: |
          ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib
          ln -s /usr/local/lib/meshlib-thirdparty-lib/include ./include

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_PYTHON_VERSION: ${{matrix.py-version}}
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
          CMAKE_CXX_COMPILER: /usr/bin/g++-10
          # not realy needed
          CMAKE_C_COMPILER: /usr/bin/gcc-10

      - name: Run Tests
        run: xvfb-run -a ./build/Release/bin/MeshViewer -hidden -noEventLoop

      - name: Unit Tests
        run: ./build/Release/bin/MRTest

      - name: Python Tests
        working-directory: ./build/Release/bin
        run: ${{ matrix.py-cmd }} ./../../../scripts/run_python_test_script.py -cmd ${{ matrix.py-cmd }}

      - name: Create and fix Wheel
        run: |
          ${{ matrix.py-cmd }} -m pip install auditwheel wheel setuptools
          ${{ matrix.py-cmd }} ./scripts/wheel/setup_workspace.py 
          cd ./scripts/wheel/meshlib
          ${{ matrix.py-cmd }} setup.py bdist_wheel --python-tag=${{matrix.py-tag}} --version ${{needs.setup.outputs.version_tag}}
          ${{ matrix.py-cmd }} -m auditwheel repair --plat manylinux_2_31_x86_64 ./dist/*.whl

      - name: Upload to Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ManyLinux-${{ matrix.py-cmd }}
          path: ./scripts/wheel/meshlib/wheelhouse/meshlib-*.whl
          retention-days: 1

      - name: Upload to Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Wheelhouse
          path: ./scripts/wheel/meshlib/wheelhouse/meshlib-*.whl
          retention-days: 1

  windows-pip-build:
    needs: setup
    timeout-minutes: 60
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        py-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - py-version: "3.8"
            py-tag: "cp38"
            py-short-version: "38"
            py-dir: "Python38"
            py-file: "python38"
            embed-version: "3.8.9"
          - py-version: "3.9"
            py-tag: "cp39"
            py-short-version: "39"
            py-dir: "Python39"
            py-file: "python39"
            embed-version: "3.9.9"
          - py-version: "3.10"
            py-tag: "cp310"
            py-short-version: "310"
            py-dir: "Python310"
            py-file: "python310"
            embed-version: "3.10.0"
          - py-version: "3.11"
            py-tag: "cp311"
            py-short-version: "311"
            py-dir: "Python311"
            py-file: "python311"
            embed-version: "3.11.0"
    steps:
      - name: Clear workspace
        run: Remove-Item -Path "${{ github.workspace }}\*" -Recurse -Force

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Start container
        run: docker run -d --name meshlib-win --workdir C:\workspace\MeshLib\MeshLib -v ${{ github.workspace }}\..\..:C:\workspace meshlib/meshlib-windows:latest ping -t localhost

      - name: Setup python
        run: |
          docker exec meshlib-win choco uninstall python python3 -y
          docker exec meshlib-win choco install python3 --version=${{matrix.py-version}} -y
          docker exec -w C:\vcpkg\installed\x64-windows-meshlib meshlib-win powershell.exe -c "Copy-Item -Path C:\${{matrix.py-dir}}\libs\${{matrix.py-file}}.lib -Destination lib"
          docker exec meshlib-win py -${{matrix.py-version}} -m pip install --upgrade pip
          docker exec meshlib-win py -${{matrix.py-version}} -m pip install --upgrade -r ./requirements/python.txt
          docker exec -w C:\workspace\MeshLib\MeshLib\thirdparty\python meshlib-win curl https://www.python.org/ftp/python/${{matrix.embed-version}}/python-${{matrix.embed-version}}-embed-amd64.zip --output python-embed.zip
          docker exec -w C:\workspace\MeshLib\MeshLib\thirdparty\python meshlib-win tar -xf python-embed.zip ${{matrix.py-file}}.zip

      - name: Build
        run: |
          docker exec meshlib-win C:\vcpkg\vcpkg.exe integrate install
          docker exec meshlib-win C:\Temp\vcbuildtools\\MSBuild\Current\Bin\MSBuild.exe source\MeshLib.sln -p:Configuration=Release -p:PythonVersion=${{matrix.py-short-version}} -p:PythonLibPath=C:\${{matrix.py-dir}}\libs\${{matrix.py-file}}.lib -p:PythonDllPath=C:\${{matrix.py-dir}}\${{matrix.py-file}}.dll -p:PythonIncludePath=C:\${{matrix.py-dir}}\include\

      - name: Run Test
        working-directory: source\x64\Release
        run: .\MeshViewer.exe -tryHidden -noEventLoop

      - name: Unit Tests
        run: docker exec meshlib-win py -3 scripts\run_unit_test_script.py Release

      - name: Python Tests
        run: docker exec -w C:\workspace\MeshLib\MeshLib\source\x64\Release meshlib-win py -3 ..\..\..\scripts\run_python_test_script.py -cmd "py -${{matrix.py-version}}"

      - name: Create and fix Wheel
        run: |
          docker exec meshlib-win py -${{matrix.py-version}} -m pip install --upgrade pip
          docker exec meshlib-win py -${{matrix.py-version}} -m pip install wheel setuptools delvewheel
          docker exec meshlib-win py -${{matrix.py-version}} .\scripts\wheel\setup_workspace.py   
          docker exec -w C:\workspace\MeshLib\MeshLib\scripts\wheel\meshlib meshlib-win py -${{matrix.py-version}} setup.py bdist_wheel --plat-name=win-amd64 --python-tag=${{matrix.py-tag}} --version ${{needs.setup.outputs.version_tag}}
          $WheelFile = (docker exec -w C:\workspace\MeshLib\MeshLib meshlib-win powershell -Command Get-ChildItem -Path scripts\wheel\meshlib\dist\*.whl -Name) 
          echo $WheelFile
          docker exec -w C:\workspace\MeshLib\MeshLib meshlib-win delvewheel repair --add-path source\x64\Release scripts\wheel\meshlib\dist\$WheelFile

      - name: Upload to Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Windows-python${{ matrix.py-version }}
          path: wheelhouse\meshlib-*.whl
          retention-days: 1

      - name: Upload to Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Wheelhouse
          path: wheelhouse\meshlib-*.whl
          retention-days: 1

      - name: Remove container
        if: always()
        run: docker rm -f meshlib-win

  macos-pip-build:
    needs: setup
    timeout-minutes: 40
    runs-on: ${{ matrix.instance }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["x86", "arm64"]
        py-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - platform: "x86"
            plat-name: macosx_12_0_x86_64
            instance: macos-12
          - platform: "arm64"
            plat-name: macosx_12_0_arm64
            instance: macos-arm-build
          - py-version: "3.8"
            py-tag: "cp38"
            py-cmd: "python3.8"
          - py-version: "3.9"
            py-tag: "cp39"
            py-cmd: "python3.9"
          - py-version: "3.10"
            py-tag: "cp310"
            py-cmd: "python3.10"
          - py-version: "3.11"
            py-tag: "cp311"
            py-cmd: "python3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Fix links
        if: ${{ matrix.py-version == '3.11' && matrix.platform == 'x86' }}
        run: |
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          sudo rm -rf /Library/Frameworks/Python.framework/
          brew install --force python@3.11 && brew unlink python@3.11 && brew unlink python@3.11 && brew link --overwrite python@3.11

      - name: Install Python
        if: ${{ !(matrix.py-version == '3.11' && matrix.platform == 'x86') }}
        run: brew install python@${{matrix.py-version}}

      - name: Python setup
        run: |
          curl -sS https://bootstrap.pypa.io/get-pip.py | ${{ matrix.py-cmd }}
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt
          ${{ matrix.py-cmd }} -m pip uninstall -y meshlib

      - name: Install thirdparty libs
        run: ./scripts/build_thirdparty.sh

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_PYTHON_VERSION: ${{matrix.py-version}}
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
          CMAKE_CXX_COMPILER: /usr/bin/clang++
          # not realy needed
          CMAKE_C_COMPILER: /usr/bin/clang

      - name: Unit Tests
        run: ./build/Release/bin/MRTest

      - name: Python Tests
        working-directory: ./build/Release/bin
        run: ${{ matrix.py-cmd }} ./../../../scripts/run_python_test_script.py -cmd ${{ matrix.py-cmd }}

      - name: Create and fix Wheel
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip install --upgrade wheel setuptools delocate
          ${{ matrix.py-cmd }} ./scripts/wheel/setup_workspace.py
          cd ./scripts/wheel/meshlib
          ${{ matrix.py-cmd }} setup.py bdist_wheel --plat-name=${{matrix.plat-name}} --python-tag=${{matrix.py-tag}} --version ${{needs.setup.outputs.version_tag}}
          delocate-path meshlib
          cd ../../..
          delocate-wheel -w . -v ./scripts/wheel/meshlib/dist/*.whl

      - name: Upload to Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Macos-${{ matrix.py-cmd }}
          path: meshlib-*.whl
          retention-days: 1

      - name: Upload to Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Wheelhouse
          path: meshlib-*.whl
          retention-days: 1

  manylinux-pip-test:
    needs: [setup, manylinux-pip-build]
    timeout-minutes: 20
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu:20.04", "ubuntu:22.04", "debian:11-slim", "fedora:37"]
        include:
          - os: "ubuntu:20.04"
            py-version: "3.8"
            py-cmd: "python3.8"
          - os: "debian:11-slim"
            py-version: "3.9"
            py-cmd: "python3.9"
          - os: "ubuntu:22.04"
            py-version: "3.10"
            py-cmd: "python3.10"
          - os: "fedora:37"
            py-version: "3.11"
            py-cmd: "python3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Ubuntu system setup
        if: ${{ matrix.os == 'ubuntu:20.04' || matrix.os == 'ubuntu:22.04' || matrix.os == 'debian:11-slim' }}
        run: apt -y update && apt -y upgrade && apt -y install curl libssl-dev python3-distutils python3-pip

      - name: Fedora 37 system setup
        if: ${{matrix.os == 'fedora:37'}}
        run: dnf -y install python3 pip

      - name: Pip setup
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip uninstall -y meshlib
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt

      - name: Download Meshlib wheel from Artifact
        uses: actions/download-artifact@v3
        with:
          name: ManyLinux-${{ matrix.py-cmd }}

      - name: Meshlib wheel install
        run: ${{ matrix.py-cmd }} -m pip install ${{ matrix.pip-options }} ./meshlib-*.whl

      - name: Run Python tests
        working-directory: test_python
        run: ${{ matrix.py-cmd }} -m pytest -s -v

  windows-pip-test:
    needs: [setup, windows-pip-build]
    timeout-minutes: 20
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        py-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Download Meshlib wheel from Artifact
        uses: actions/download-artifact@v3
        with:
          name: Windows-python${{matrix.py-version}}

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}

      - name: Setup pip
        run: |
          py -${{matrix.py-version}} -m pip install --upgrade pip
          py -${{matrix.py-version}} -m pip uninstall -y meshlib
          py -${{matrix.py-version}} -m pip install --upgrade -r ./requirements/python.txt     

      - name: Install Meshlib wheel
        shell: pwsh
        run: $wheel_file=Get-ChildItem -Filter meshlib*win*.whl; py -${{matrix.py-version}} -m pip install $wheel_file

      - name: Run Python tests
        working-directory: test_python
        run: py -${{matrix.py-version}} -m pytest -s -v

  macos-pip-test:
    needs: [setup, macos-pip-build]
    timeout-minutes: 20
    runs-on: ${{ matrix.instance }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["arm64", "x86"]
        py-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - platform: "x86"
            plat-name: macosx_12_0_x86_64
            instance: macos-12
          - platform: "arm64"
            plat-name: macosx_12_0_arm64
            instance: macos-arm-build
          - py-version: "3.8"
            py-cmd: "python3.8"
          - py-version: "3.9"
            py-cmd: "python3.9"
          - py-version: "3.10"
            py-cmd: "python3.10"
          - py-version: "3.11"
            py-cmd: "python3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Python setup
        if: ${{ !(matrix.platform == 'x86' && matrix.py-version == '3.11') }}
        run: brew install python@${{matrix.py-version}}

      - name: Pip setup
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip uninstall -y meshlib
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt

      - name: Download Meshlib wheel from Artifact
        uses: actions/download-artifact@v3
        with:
          name: Macos-${{ matrix.py-cmd }}

      - name: Meshlib wheel install
        run: ${{ matrix.py-cmd }} -m pip install ${{ matrix.pip-options }} ./meshlib-*${{matrix.platform}}*.whl

      - name: Run Python tests
        working-directory: test_python
        run: ${{ matrix.py-cmd }} -m pytest -s -v

  upload-to-release:
    needs: [manylinux-pip-test, windows-pip-test, macos-pip-test]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Download Wheels Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Wheelhouse

      - name: Install twine
        run: python3 -m pip install --upgrade pip twine

      - name: Upload to Production PyPi
        run: twine upload ./meshlib-*.whl -u MeshInspector -p ${{ secrets.PIP_TEST_REPO_PASS }} --skip-existing

  post-release-test:
    needs: upload-to-release
    uses: MeshInspector/MeshLib/.github/workflows/release-tests.yml@master

  delete-artifacts:
    timeout-minutes: 5
    runs-on: ubuntu-20.04
    needs: upload-to-release
    if: always()
    steps:
      - name: Delete Wheelhouse
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Wheelhouse
          failOnError: false

      - name: Delete all ManyLinux
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ManyLinux-*
          failOnError: false

      - name: Delete all Windows
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Windows-*
          failOnError: false

      - name: Delete all Macos
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Macos-*
          failOnError: false
