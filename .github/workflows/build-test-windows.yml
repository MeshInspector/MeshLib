name: Build and test Windows

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      UPLOAD_ARTIFACTS:
        required: true
        type: boolean

env:
  VCPKG-VERSION: 'fbba5251f75c149d71737fd3ef09629f41b5d5aa'

jobs:
  windows-build-test:
    timeout-minutes: 50
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        config: [ "Debug", "Release" ]
        runner: [ windows-2022, windows-2019 ]
        include:
          - runner: windows-2022
            vc-path: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
            CUDA-VERSION: '12.0.1.52833'
            CUDA-MAJOR: '12'
            CUDA-MINOR: '0'
          - runner: windows-2019
            vc-path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
            CUDA-VERSION: '11.4.2.47141'
            CUDA-MAJOR: '11'
            CUDA-MINOR: '4'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout Vcpkg ${{env.VCPKG-VERSION}}
        working-directory: C:\vcpkg
        run: |
          git fetch
          git checkout ${{env.VCPKG-VERSION}}

      - name: Restore Vcpkg Cache
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          key: vcpkg-cache-${{env.VCPKG-VERSION}}
          path: |
            C:\vcpkg\*

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update vcpkg packages
        run: |
          .\thirdparty\install.bat --write-s3

      - name: Vcpkg integrate install
        working-directory: C:\vcpkg
        run: C:\vcpkg\vcpkg.exe integrate install

      - name: Restore CUDA Cache
        uses: actions/cache@v3
        id: cuda-cache
        with:
          key: cuda-${{matrix.CUDA-VERSION}}
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA*

      - name: Install CUDA
        if: steps.cuda-cache.outputs.cache-hit != 'true'
        run: choco install cuda --version=${{matrix.CUDA-VERSION}} --confirm

      - name: Setup CUDA
        shell: bash
        run: |
          echo "CUDA_PATH=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ matrix.CUDA-MAJOR }}.${{ matrix.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "CUDA_PATH_V${{ matrix.CUDA-MAJOR }}_${{ matrix.CUDA-MINOR }}=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ matrix.CUDA-MAJOR }}.${{ matrix.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "CUDA_PATH_VX_Y=CUDA_PATH_V${{ matrix.CUDA-MAJOR }}_${{ matrix.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ matrix.CUDA-MAJOR }}.${{ matrix.CUDA-MINOR }}\\bin" >> $GITHUB_PATH

      - name: Install Visual Studio Integration
        run: |
          $x = (dir $env:CUDA_PATH -dir -recurse -depth 2).where({$_.name -eq 'visual_studio_integration'}).fullname
          $y = (dir $x -dir -recurse).where({$_.name -eq 'MSBuildExtensions'}).fullname + '\*'
          (gi '${{matrix.vc-path}}\MSBuild\Microsoft\VC\*\BuildCustomizations').fullname.foreach({cp $y $_})

      - name: Setup python
        run: |
          py -3.11 -m ensurepip --upgrade
          py -3.11 -m pip install --upgrade pip
          py -3.11 -m pip install -r .\requirements\python.txt

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3

      - name: Build
        run: msbuild -m source\MeshLib.sln -p:Configuration=${{ matrix.config }}

      - name: Run Test
        working-directory: source\x64\${{ matrix.config }}
        run: .\MeshViewer.exe -tryHidden -noEventLoop

      - name: Unit Tests
        run: py -3 scripts\run_unit_test_script.py ${{ matrix.config }}

      - name: Python Tests
        working-directory: source\x64\${{ matrix.config }}
        run: py -3 ..\..\..\scripts\run_python_test_script.py

      - name: Archive files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.runner == 'windows-2019' }}
        run: tar -a -c -f MREDist_${{ matrix.config }}.zip ./source/x64/${{matrix.config}}

      - name: Upload Windows Binaries Archive
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.runner == 'windows-2019' }}
        uses: actions/upload-artifact@v3
        with:
          name: WindowsArchive
          path: MREDist_${{ matrix.config }}.zip
          retention-days: 1
