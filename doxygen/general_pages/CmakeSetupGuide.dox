/**
\page MeshLibCmakeSetupGuide MeshLib CMake Setup Guide

# How to Use MeshLib with CMake

\tableofcontents

## CMake Integration Support
MeshLib provides CMake integration support for \b Windows, \b Linux and \b macOS.
Example CMake configuration files are available to demonstrate how to link against the pre-built libraries.
You can find these examples in the [examples directory](https://github.com/MeshInspector/MeshLib/blob/master/examples/cpp-examples/CMakeLists.txt).

## Windows Integration Guide

MeshLib supports \b Windows via CMake, including integration with **Visual Studio**.

To enable support in Visual Studio, ensure the **CMake component** is installed in your Visual Studio setup. Once installed, standard CMake configuration should work seamlessly.

For easier setup and dependency management, we recommend using \b vcpkg as outlined in our \ref MeshLibCppSetupGuide "C++ Setup Guide". You can configure your build with the following command:

\code
cmake -DCMAKE_TOOLCHAIN_FILE=C:\path\to\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-meshlib
\endcode

## Quick Integration Guide

### Find MeshLib CMake Configuration Files

For a start, find the MeshLib package:
\code{.cmake}
find_package(MeshLib CONFIG REQUIRED)
\endcode

### Include the MeshLib Headers

Ensure that the `include` directory from the installed MeshLib package is added to your project's include directories. In your CMake configuration (`CMakeLists.txt`), add:
\code{.cmake}
include_directories(${MESHLIB_INCLUDE_DIR})
# or
target_include_directories(your_project_name PUBLIC ${MESHLIB_INCLUDE_DIR})
\endcode

### Link the MeshLib Libraries

Specify which MeshLib libraries to link with your project:
\code{.cmake}
target_link_libraries(your_project_name PUBLIC MeshLib::MRMesh)
# if you want to use viewer libraries
target_link_libraries(your_project_name PUBLIC MeshLib::MRMesh MeshLib::MRViewer)
\endcode

Or if you use the C API, instead link `MeshLib::MeshLibC2`:

\code{.cmake}
target_link_libraries(your_project_name PUBLIC MeshLib::MeshLibC2)
\endcode

### Find Third-Party Dependencies

MeshLib have extended functionality that may have additional dependencies that need to be linked.
Check the example `CMakeLists.txt` provided in the [examples directory](https://github.com/MeshInspector/MeshLib/blob/master/examples/cpp-examples/CMakeLists.txt) to see how to add required dependencies:

\code{.cmake}
target_include_directories(your_project_name PUBLIC ${MESHLIB_THIRDPARTY_INCLUDE_DIR})
target_link_directories(your_project_name PUBLIC ${MESHLIB_THIRDPARTY_LIB_DIR})
\endcode

*/
