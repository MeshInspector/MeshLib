cmake_minimum_required(VERSION 3.16 FATAL_ERROR)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project (MeshLib_thirdparty CXX)

# all binaries will be located in ./build/Release/bin
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

set(MESHLIB_THIRDPARTY_DIR "${PROJECT_SOURCE_DIR}")
set(MESHLIB_THIRDPARTY_INCLUDE_DIR "include")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-sign-compare -Wno-unknown-pragmas -Wno-unused-variable \
       -Wno-unused-function -Wno-unused-variable -Wno-comment -Wno-parentheses -Wno-int-in-bool-context -Wno-strict-aliasing \
       -Wno-macro-redefined -Wno-return-type -Wno-unused-variable -Wno-deprecated-declarations -Wno-unused-command-line-argument -Wno-deprecated-pragma")

IF(MR_EMSCRIPTEN AND NOT MR_EMSCRIPTEN_SINGLETHREAD)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread")
ENDIF()

#imgui build
file(GLOB IMGUI_SOURCES "./imgui/*.cpp" "./../source/imgui/*.cpp" "./imgui/misc/freetype/*.cpp" "./imgui/backends/imgui_impl_opengl3.cpp" "./imgui/backends/imgui_impl_glfw.cpp")
file(GLOB IMGUI_HEADERS "./imgui/*.h" "./../source/imgui/*.h" "./imgui/misc/freetype/*.h" "./imgui/backends/imgui_impl_opengl3.h" "./imgui/backends/imgui_impl_glfw.h" "./imgui/backends/imgui_impl_opengl3_loader.h")
include_directories("../source/")
include_directories("../thirdparty/imgui/")
include_directories("../thirdparty/parallel-hashmap/")
add_compile_definitions(IMGUI_USER_CONFIG=\"imgui/MRCustomImGuiConfig.h\")
add_compile_definitions(IMGUI_ENABLE_FREETYPE)
add_library(imgui SHARED ${IMGUI_SOURCES} ${IMGUI_HEADERS})
IF ( MR_EMSCRIPTEN )
  add_compile_definitions(IMGUI_IMPL_OPENGL_ES3)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s USE_FREETYPE=1")
ELSE()
  set(BUILD_SHARED_LIBS ON)
  find_package(glfw3 CONFIG REQUIRED)
  find_package(Freetype REQUIRED)
  include_directories(${FREETYPE_INCLUDE_DIRS})
  IF(APPLE)
    target_link_libraries(imgui PRIVATE ${FREETYPE_LIBRARIES} glfw)
    set(INSTALL_GTEST ON)
    add_subdirectory(./googletest)
  ELSE()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-but-set-variable")
  ENDIF()
ENDIF()

IF(APPLE OR MR_EMSCRIPTEN)
    add_subdirectory(./expected ./expected)
ELSE()
 # get os name and version
 file(STRINGS /etc/os-release distro REGEX "^NAME=")
 string(REGEX REPLACE "NAME=\"(.*)\"" "\\1" distro "${distro}")

 # check version (major)
 file(STRINGS /etc/os-release version_id REGEX "^VERSION_ID=")
 string(REGEX REPLACE "VERSION_ID=\"(.*)\"" "\\1" version_id "${version_id}")
 string(FIND ${version_id} "." dot-pos)
 string(SUBSTRING ${version_id} 0 ${dot-pos} version_id)
 message("using ${distro} ${version_id}")

 IF( ${distro} STREQUAL "Ubuntu")
 SET(MR_OPENVDB TRUE)
  IF( ${version_id} STREQUAL "20")
   SET(MR_OPENVDB_OLD TRUE)
  ENDIF() # Ubuntu 20
 ENDIF() # Ubuntu

 IF( ${distro} STREQUAL "Fedora Linux")
  SET(MR_FEDORA TRUE)
 ENDIF() # Fedora

 IF(MR_OPENVDB)
  set(OPENVDB_ENABLE_UNINSTALL OFF)
  set(OPENVDB_ENABLE_INSTALL OFF)
  set(OPENVDB_CORE_SHARED "ON")
  set(OPENVDB_CORE_STATIC "OFF")
  set(OPENVDB_BUILD_BINARIES OFF)
  set(OPENVDB_BUILD_VDB_PRINT OFF)
  set(USE_EXPLICIT_INSTANTIATION OFF)

  IF(MR_OPENVDB_OLD)
   add_subdirectory(./openvdb/v9/openvdb)
  ELSE()
   add_subdirectory(./openvdb/v10/openvdb)
  ENDIF()
 ENDIF()

 set(CPR_ENABLE_UNINSTALL "OFF")
 set(CPR_ENABLE_INSTALL "OFF")
 set(CPR_USE_SYSTEM_GTEST "ON")
 set(CPR_BUILD_TESTS "OFF")
 set(CPR_BUILD_TESTS_SSL "OFF")
 add_subdirectory(./cpr)
ENDIF()

add_subdirectory(./OpenCTM ./OpenCTM)
option(PHMAP_INSTALL "" ON)
add_subdirectory(./parallel-hashmap)

IF(MR_EMSCRIPTEN)
  add_compile_definitions(GTEST_HAS_CXXABI_H_=0)
  set(INSTALL_GTEST ON)
  add_subdirectory(./googletest)

  set(ENABLE_PROGRAMS OFF CACHE BOOL "")
  add_subdirectory(./mbedtls)
  install(DIRECTORY mbedtls/include/mbedtls DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR})

  # Use custom FindMbedTLS.cmake to override the one included in ziplib, that does not work
  list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

  set(BUILD_TOOLS OFF CACHE BOOL "")
  set(BUILD_REGRESS OFF CACHE BOOL "")
  set(BUILD_EXAMPLES OFF CACHE BOOL "")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s USE_ZLIB=1")
  set(LIBZIP_DO_INSTALL ON)
  add_subdirectory(./libzip)

  set(CMAKE_CXX_FLAGS_BACKUP "${CMAKE_CXX_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s NO_DISABLE_EXCEPTION_CATCHING=1")
  add_subdirectory(./jsoncpp)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_BACKUP}")

  set(SPDLOG_INSTALL ON)
  add_subdirectory(./spdlog)

  option(TBB_TEST "Enable testing" OFF)
  set(CMAKE_SYSTEM_PROCESSOR_BACKUP "${CMAKE_SYSTEM_PROCESSOR}")
  set(CMAKE_SYSTEM_PROCESSOR "unknown")
  add_subdirectory(./onetbb)
  set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_SYSTEM_PROCESSOR_BACKUP}")
  install(DIRECTORY onetbb/include/tbb DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR})
ELSE() # not MR_EMSCRIPTEN
  set(CLIP_EXAMPLES OFF)
  set(CLIP_TESTS OFF)
  set(CLIP_X11_WITH_PNG OFF)
  set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
  add_subdirectory(./clip)
  add_subdirectory(./libE57Format)
  file(GLOB CLIP_HEADERS "clip/*.h")
  install(FILES ${CLIP_HEADERS} DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR}/clip)
ENDIF()

set(GLAD_INSTALL ON)
add_subdirectory(./glad)
set(PYBIND11_INSTALL ON)
add_subdirectory(./pybind11)
set(TINYGLTF_INSTALL ON)
add_subdirectory(./tinygltf)

set(WITH_TESTS OFF CACHE BOOL "")
add_subdirectory(./laz-perf)

file(GLOB IMGUI_HEADERS "imgui/*.h")
install(FILES ${IMGUI_HEADERS} DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR}/imgui)
install(DIRECTORY imgui/backends DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR}/imgui)
install(DIRECTORY imgui/misc DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR}/imgui)
install(DIRECTORY eigen/Eigen DESTINATION ${MESHLIB_THIRDPARTY_INCLUDE_DIR})

