name: Build and test Fedora 39

on:
  workflow_call:
    inputs:
      app_version:
        required: true
        type: string
      autotest_data_s3_url:
        required: true
        type: string
      docker_image_tag:
        required: true
        type: string
      full_config_build:
        default: false
        required: false
        type: boolean
      internal_build:
        required: false
        type: boolean
      upload_artifacts:
        required: true
        type: boolean
      upload_test_artifacts:
        required: true
        type: boolean

jobs:
  fedora-build-test:
    timeout-minutes: 40
    runs-on: ubuntu-latest
    container:
      image: meshlib/meshlib-fedora39:${{ inputs.docker_image_tag }}
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
        compiler: [Clang 17, GCC 13]
        full_config_build:
          - ${{ fromJSON( inputs.full_config_build ) }}
        exclude:
          # Do not run Release Clang 17 build on every commit (but only once a day)
          - full_config_build: false
            compiler: Clang 17
            config: Release
          # Do not run Debug GCC 13 build on every commit (but only once a day)
          - full_config_build: false
            compiler: GCC 13
            config: Debug
        include:
          - compiler: Clang 17
            cxx-compiler: /usr/bin/clang++-17
            c-compiler: /usr/bin/clang-17
          - compiler: GCC 13
            cxx-compiler: /usr/bin/g++
            c-compiler: /usr/bin/gcc
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    env:
      # Disables AWS Instance Metadata Service (IMDS), that not in use.
      # Workaround for aws cli s3 copy - it doesn't work anonymously without this. Specific for Ubuntu 20 and Fedora.
      # https://github.com/aws/aws-cli/issues/5623#issuecomment-801240811
      AWS_EC2_METADATA_DISABLED: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout third-party submodules
        run: |
          # have to checkout selective submodules by our own
          # related issue: https://github.com/actions/checkout/issues/1779
          export HOME=${RUNNER_TEMP}
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          git submodule update --init --depth 1 thirdparty/imgui thirdparty/parallel-hashmap

      - name: Install thirdparty libs
        run: |
          ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib
          ln -s /usr/local/lib/meshlib-thirdparty-lib/include ./include

      - name: Setup python requirements
        run: python3 -m pip install -r ./requirements/python.txt

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_BUILD_RELEASE: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Release'] }}
          MESHLIB_BUILD_DEBUG: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Debug'] }}
          CMAKE_CXX_COMPILER: ${{ matrix.cxx-compiler }}
          MR_VERSION: ${{ inputs.app_version }}
          # options to be passed to cmake
          MR_CMAKE_OPTIONS: >
            -DMR_CXX_STANDARD=23
            -DMR_PCH_USE_EXTRA_HEADERS=ON
            -DMESHLIB_BUILD_MRMESH_PY_LEGACY=ON

      - name: Collect Timings
        run: ./scripts/devops/collect_timing_logs.sh fedora39 ${{matrix.config}} "${{matrix.compiler}}"

      #Save timing in artifact
      - name: Upload Timings
        uses: actions/upload-artifact@v4
        with:
          name: Timing_Logs_${{matrix.os}}_${{matrix.config}}_${{matrix.compiler}}
          path: time_log/

      - name: Run Start-and-Exit Tests
        run: MR_LOCAL_RESOURCES=1 xvfb-run -a ./build/${{ matrix.config }}/bin/MeshViewer -hidden -noEventLoop -unloadPluginsAtEnd

      - name: Unit Tests
        run: ./build/${{ matrix.config }}/bin/MRTest

      - name: Python Sanity Tests
        working-directory: ./build/${{ matrix.config }}/bin
        run: python3 ./../../../scripts/run_python_test_script.py -d '../test_python'

      - name: Configure AWS Credentials
        if: ${{ inputs.upload_test_artifacts && inputs.internal_build }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::259351611210:role/GitHubMeshLibAwsCredsRole
          aws-region: us-east-1

      # cache managment: https://github.com/MeshInspector/MeshLib/actions/caches
      - name: Cache autotest data from S3 Tests
        if: ${{ inputs.internal_build }}
        id: cache-autotest
        uses: actions/cache@v4
        with:
          path: ./test_data
          key: ${{ inputs.autotest_data_s3_url }}

      - name: Copy autotest data from S3 Tests
        if: ${{ inputs.internal_build }}
        run: aws s3 sync ${{ inputs.autotest_data_s3_url }} ./test_data --delete --no-sign-request --size-only

      - name: Python Regression Tests
        env:
          SMOKE: ${{ inputs.internal_build && !inputs.full_config_build && matrix.config == 'Debug' }}
          BINDS_V: ${{ fromJSON('[2,3]')[inputs.mrbind || 0] }}
        if: ${{ inputs.internal_build }}
        working-directory: ./build/${{ matrix.config }}/bin
        run: python3 ./../../../scripts/run_python_test_script.py -d '../test_regression' -s ${{env.SMOKE}} -bv ${{env.BINDS_V}}

      - name: Copy test artifacts to S3
        if: ${{ inputs.upload_test_artifacts && inputs.internal_build && !cancelled() }}
        run: aws s3 cp ./pytest_temp 's3://test-artifacts-git/tests/${{github.run_id}}/fedora/${{matrix.os}}/${{matrix.config}}' --recursive

      - name: Create RPM
        if: ${{ matrix.config == 'Release' && matrix.compiler == 'GCC 13' }}
        env:
          MESHLIB_BUILD_RELEASE: ON
          MESHLIB_BUILD_DEBUG: OFF
        run: ./scripts/distribution_rpm.sh ${{ inputs.app_version }}

      - name: Extract RPM
        if: ${{ matrix.config == 'Release' && matrix.compiler == 'GCC 13' }}
        run: rpm2cpio meshlib-dev.rpm | cpio --extract --make-directories --preserve-modification-time --directory=$(pwd)/meshlib_install/

      - name: Build C++ examples
        if: ${{ matrix.config == 'Release' && matrix.compiler == 'GCC 13' }}
        run: |
          cmake \
            -S examples/cpp-examples \
            -B cpp-examples-build \
            -D CMAKE_FIND_ROOT_PATH=$(pwd)/meshlib_install/ \
            -D CMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }}
          cmake \
            --build cpp-examples-build \
            --parallel $(nproc)

      - name: Build C examples
        if: ${{ matrix.config == 'Release' && matrix.compiler == 'GCC 13'}}
        run: |
          cmake \
            -S examples/c-examples \
            -B c-examples-build \
            -D CMAKE_FIND_ROOT_PATH=$(pwd)/meshlib_install/ \
            -D CMAKE_C_COMPILER=${{ matrix.c-compiler }}
          cmake \
            --build c-examples-build \
            --parallel $(nproc)

      - name: Upload Fedora Developer Distribution
        if: ${{ inputs.upload_artifacts && matrix.config == 'Release' && matrix.compiler == 'GCC 13' }}
        uses: actions/upload-artifact@v4
        with:
          name: Distributives_fedora39-x86
          path: meshlib-dev.rpm
          retention-days: 1
