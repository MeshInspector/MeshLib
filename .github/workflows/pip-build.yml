name: Build Pip Wheels

on:
  release:
    types: [ published ]
  workflow_dispatch:

env:
  VCPKG-VERSION: 'fbba5251f75c149d71737fd3ef09629f41b5d5aa'
  CUDA-VERSION: '11.4.2.47141'
  CUDA-MAJOR: '11'
  CUDA-MINOR: '4'


jobs:
  setup:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

  manylinux-pip-build:
    needs: setup
    timeout-minutes: 40
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.docker-image }}
      options: ${{ matrix.container-options }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["x86_64", "aarch64"]
        py-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - platform: "x86_64"
            docker-image: "meshlib/meshlib-ubuntu:latest"
            container-options: "--user root"
            runner: ubuntu-latest
          - platform: "aarch64"
            docker-image: "meshlib/meshlib-ubuntu-arm64:latest"
            container-options: "--user root"
            runner: [ 'self-hosted', 'linux-arm64' ]
          - py-version: "3.8"
            py-tag: "cp38"
            py-cmd: "python3.8"
          - py-version: "3.9"
            py-tag: "cp39"
            py-cmd: "python3.9"
          - py-version: "3.10"
            py-tag: "cp310"
            py-cmd: "python3.10"
          - py-version: "3.11"
            py-tag: "cp311"
            py-cmd: "python3.11"
    steps:
      - name: Git - add safe directory
        run: git config --global --add safe.directory ${{github.workspace}}/*

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Python setup
        if: ${{ matrix.py-version != '3.8' }}
        run: |
          apt -y update && apt -y upgrade && apt -y install software-properties-common
          add-apt-repository -y ppa:deadsnakes/ppa && apt -y install ${{ matrix.py-cmd }}-dev ${{ matrix.py-cmd }}-distutils

      - name: Pip setup
        run: |
          curl -sS https://bootstrap.pypa.io/get-pip.py | ${{ matrix.py-cmd }}
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt
          ${{ matrix.py-cmd }} -m pip install pytest 

      - name: Install thirdparty libs
        run: |
          ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib
          ln -s /usr/local/lib/meshlib-thirdparty-lib/include ./include

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_PYTHON_VERSION: ${{matrix.py-version}}
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
          CMAKE_CXX_COMPILER: /usr/bin/clang++-11
          # not realy needed
          CMAKE_C_COMPILER: /usr/bin/clang-11

      - name: Create and fix Wheel
        run: |
          ${{ matrix.py-cmd }} -m pip install auditwheel wheel setuptools
          ${{ matrix.py-cmd }} ./scripts/wheel/setup_workspace.py 
          cd ./scripts/wheel/meshlib
          ${{ matrix.py-cmd }} setup.py bdist_wheel --python-tag=${{matrix.py-tag}} --version ${{needs.setup.outputs.version_tag}}
          ${{ matrix.py-cmd }} -m auditwheel repair --plat manylinux_2_31_${{matrix.platform}} ./dist/*.whl

      - name: Upload to Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ManyLinux-${{matrix.py-cmd}}-${{matrix.platform}}
          path: ./scripts/wheel/meshlib/wheelhouse/meshlib-*.whl
          retention-days: 1

  manylinux-pip-test:
    needs: [setup, manylinux-pip-build]
    timeout-minutes: 20
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{matrix.container-prefix}}${{matrix.os}}
      options: ${{ matrix.container-options }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["x86_64", "aarch64"]
        os: ["ubuntu:20.04", "ubuntu:22.04", "debian:11-slim", "fedora:37"]
        include:
          - platform: "x86_64"
            runner: ubuntu-latest
            container-options: "--user root"
            container-prefix: " "
          - platform: "aarch64"
            runner: [ 'self-hosted', 'linux-arm64' ]
            container-options: "--user root"
            container-prefix: "arm64v8/"
          - os: "ubuntu:20.04"
            py-version: "3.8"
            py-cmd: "python3.8"
          - os: "debian:11-slim"
            py-version: "3.9"
            py-cmd: "python3.9"
          - os: "ubuntu:22.04"
            py-version: "3.10"
            py-cmd: "python3.10"
          - os: "fedora:37"
            py-version: "3.11"
            py-cmd: "python3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Ubuntu system setup
        if: ${{ matrix.os == 'ubuntu:20.04' || matrix.os == 'ubuntu:22.04' || matrix.os == 'debian:11-slim' }}
        run: apt -y update && apt -y upgrade && apt -y install curl libssl-dev python3-distutils python3-pip

      - name: Fedora 37 system setup
        if: ${{matrix.os == 'fedora:37'}}
        run: dnf -y install python3 pip

      - name: Pip setup
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip uninstall -y meshlib
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt
          ${{ matrix.py-cmd }} -m pip install pytest

      - name: Download Meshlib wheel from Artifact
        uses: actions/download-artifact@v3
        with:
          name: ManyLinux-${{matrix.py-cmd}}-${{matrix.platform}}

      - name: Meshlib wheel install
        run: ${{ matrix.py-cmd }} -m pip install ${{ matrix.pip-options }} ./meshlib-*.whl

      - name: Run Python tests
        working-directory: test_python
        run: ${{ matrix.py-cmd }} -m pytest -s -v

  delete-artifacts:
    timeout-minutes: 5
    runs-on: ubuntu-20.04
    needs: upload-to-release
    if: always()
    steps:
      - name: Delete Wheelhouse
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Wheelhouse
          failOnError: false

      - name: Delete all ManyLinux
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ManyLinux-*
          failOnError: false
