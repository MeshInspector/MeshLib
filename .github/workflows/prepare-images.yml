name: Prepare images

on:
  workflow_call:
    inputs:
      docker_image_tag:
        required: true
        type: string
      need_linux_image_rebuild:
        required: true
        type: boolean
      need_windows_vcpkg_rebuild:
        required: true
        type: boolean
      vcpkg_version:
        required: true
        type: string

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  image-select:
    timeout-minutes: 5
    runs-on: ubuntu-20.04
    outputs:
      image_path: ${{ steps.set-path.outputs.image_path }} # TODO: always equal to "meshlib/meshlib"; can it be replaced with env value?
      matrix: ${{ steps.matrix-set.outputs.matrix}} # TODO: move matrix to "linux-image-build-upload" job?
    steps:
      - name: Set image tag base path
        id: set-path
        run: |
          repo_path="MeshLib/MeshLib"
          echo "image_path=${repo_path,,}" >> $GITHUB_OUTPUT

        #                    [os,     runner-label ]
        # for MeshLib:       [ubuntu, ubuntu-latest], [fedora, ubuntu-latest], [windows, windows-2019]
        # for MeshInspector: [ubuntu, ubuntu-latest], [fedora, ubuntu-latest], [emscripten, ubuntu-latest]
      - name: Select matrix
        id: matrix-set
        if: ${{ inputs.need_linux_image_rebuild }}
        run: |
          echo ${{github.repository}}
          MATRIX=" \
          {\"include\":[ \
          {\"dockerfile\":\"ubuntu20Dockerfile\",   \"image\":\"ubuntu20\",         \"os\":\"ubuntu-latest\"}, \
          {\"dockerfile\":\"ubuntu22Dockerfile\",   \"image\":\"ubuntu22\",       \"os\":\"ubuntu-latest\"}, \
          {\"dockerfile\":\"ubuntu24Dockerfile\",   \"image\":\"ubuntu24\",       \"os\":\"ubuntu-latest\"}, \
          {\"dockerfile\":\"ubuntu20Dockerfile\",   \"image\":\"ubuntu-arm64\",   \"os\":[\"self-hosted\", \"linux-arm64\"]}, \
          {\"dockerfile\":\"ubuntu22Dockerfile\",   \"image\":\"ubuntu22-arm64\", \"os\":[\"self-hosted\", \"linux-arm64\"]}, \
          {\"dockerfile\":\"ubuntu24Dockerfile\",   \"image\":\"ubuntu24-arm64\", \"os\":[\"self-hosted\", \"linux-arm64\"]}, \
          {\"dockerfile\":\"fedora39Dockerfile\",   \"image\":\"fedora39\",       \"os\":\"ubuntu-latest\"}, \
          {\"dockerfile\":\"emscriptenDockerfile\", \"image\":\"emscripten\",     \"os\":\"ubuntu-latest\"}, \
          ]}"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "$MATRIX"

  linux-image-build-upload:
    needs: [image-select]
    if: ${{ inputs.need_linux_image_rebuild }}
    timeout-minutes: 75
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.image-select.outputs.matrix)}}
    env:
      DOCKERHUB_BASE_PATH: ${{ needs.image-select.outputs.image_path }}
    steps:
      - name: Remove unused Docker data
        if: ${{ matrix.distribution != 'windows' }}
        run: docker system prune --force --all --volumes

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: meshlib
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Linux image
        run: docker build -f ./docker/${{matrix.dockerfile}} -t ${{env.DOCKERHUB_BASE_PATH}}-${{matrix.image}}:${{inputs.docker_image_tag}} . --progress=plain

      - name: Push Linux image
        run: docker push ${{env.DOCKERHUB_BASE_PATH}}-${{matrix.image}}:${{inputs.docker_image_tag}}

      - name: Remove unused Docker data
        if: ${{ matrix.image != 'windows' }}
        run: docker system prune --force --all --volumes

  windows-vcpkg-build-upload:
    if: ${{ inputs.need_windows_vcpkg_rebuild }}
    timeout-minutes: 240
    runs-on: windows-2019
    steps:
      - name: Setup vcpkg
        working-directory: C:\vcpkg
        run: |
          git fetch
          git checkout ${{ inputs.vcpkg_version }}
          bootstrap-vcpkg.bat
          vcpkg.exe integrate install

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build and cache vcpkg
        run: .\thirdparty\install.bat --write-s3
