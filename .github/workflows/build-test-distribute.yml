# This is a basic workflow to help you get started with Actions

name: Build Test Distribute

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#UPLOAD_ARTIFACTS condition: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

jobs:
  prepare-image:
    uses: MeshInspector/MeshLib/.github/workflows/prepare-images.yml@master
    secrets:
      BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  versioning-and-release-url:
    uses: MeshInspector/MeshLib/.github/workflows/versioning-release.yml@master
    with:
      version-namespace: ${{ contains(github.event.pull_request.labels.*.name, 'full-ci') && github.event_name != 'push' && 'pr-test' || '' }}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    secrets:
      BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}

  windows-build-test:
    needs: [ prepare-image, versioning-and-release-url ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-windows.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.windows_image_tag}}
      version: ${{needs.versioning-and-release-url.outputs.version_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  ubuntu20-build-test:
    needs: [ prepare-image, versioning-and-release-url ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-ubuntu20.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      version: ${{needs.versioning-and-release-url.outputs.version_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  ubuntu22-build-test:
    needs: [ prepare-image, versioning-and-release-url ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-ubuntu22.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      version: ${{needs.versioning-and-release-url.outputs.version_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  fedora35-build-test:
    needs: [ prepare-image, versioning-and-release-url ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-fedora35.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      version: ${{needs.versioning-and-release-url.outputs.version_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  emscripten-build-test:
    needs: [ prepare-image, versioning-and-release-url ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-emscripten.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  macos-build-test:
    needs: [ versioning-and-release-url ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-macos.yml@master
    with:
      version: ${{needs.versioning-and-release-url.outputs.version_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  update-win-version:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    needs: [ windows-build-test ]
    timeout-minutes: 15
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          submodules: recursive

      - name: Download Windows Binaries Archive
        uses: actions/download-artifact@v3
        with:
          name: WindowsArchive

      - name: Extract Windows Binaries
        run: |
          tar -xvzf MREDist_Release.zip
          tar -xvzf MREDist_Debug.zip

      - name: Make Install Folder
        run: py -3.10 scripts\make_install_folder.py ${{needs.versioning-and-release-url.outputs.version_tag}}

      - name: Distribute
        run: py -3.10 scripts\zip_distribution.py MeshLibDist.zip

      - name: Upload Windows Distribution
        uses: actions/upload-artifact@v3
        with:
          name: Distributives
          path: MeshLibDist.zip
          retention-days: 1


  upload-distributions:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs:
      - update-win-version
      - ubuntu20-build-test
      - ubuntu22-build-test
      - fedora35-build-test
      - emscripten-build-test
      - macos-build-test
      - versioning-and-release-url
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download All Developer Distributives
        uses: actions/download-artifact@v3
        with:
          name: Distributives

      - name: Rename Distributives
        run: |
          mv MeshLibDist.zip MeshLibDist_${{needs.versioning-and-release-url.outputs.version_tag}}.zip
          mv meshlib-ubuntu20-dev.deb meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu20-dev.deb
          mv meshlib-ubuntu22-dev.deb meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu22-dev.deb
          mv meshlib-dev.rpm meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.rpm

      - name: Upload Distributives
        run: |
          echo ${{ secrets.BUILD_MACHINE_TOKEN }} | gh auth login --with-token
          gh release upload ${{needs.versioning-and-release-url.outputs.version}} \
                            MeshLibDist_${{needs.versioning-and-release-url.outputs.version_tag}}.zip \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu20-dev.deb \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu22-dev.deb \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.rpm \

  update-artifacts:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    needs: upload-distributions
    if: always()
    steps:
        # all Windows
      - name: Delete Windows Debug Install Archive artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: WindowsArchive
          failOnError: false

      # Distributives
      - name: Delete Distribution
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Distributives
          failOnError: false

      - name: Delete Wheelhouse
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Wheelhouse
          failOnError: false

      # generate timing logs archive
      - name: Download Timing Logs Archive
        uses: actions/download-artifact@v3
        with:
          name: Timing_Logs

      - name: Generate Timing Logs Archive
        run: tar -cvzf time_log.tar.gz ./*.csv

      - name: Upload Timing Logs Archive
        uses: actions/upload-artifact@v3
        with:
          name: time_log
          path: time_log.tar.gz
          retention-days: 1

      - name: Delete Timing Logs Source
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Timing_Logs
          failOnError: false
