name: Build and test on arm64 ubuntu20 and ubuntu22

on:
  workflow_call:
    inputs:
      docker_image_tag:
        required: true
        type: string
      app_version:
        required: true
        type: string
      full_config_build:
        default: false
        required: false
        type: boolean
      autotest_data_s3_url:
        default: "s3://data-autotest/test_data_2024-nov-07"
        required: false
        type: string
      UPLOAD_ARTIFACTS:
        required: true
        type: boolean
      mrbind:
        default: true
        required: false
        type: boolean

jobs:
  ubuntu-arm-build-test:
    timeout-minutes: 40
    runs-on: [self-hosted, linux-arm64]
    container:
      image: ${{ matrix.docker-image }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu20, ubuntu22, ubuntu24 ]
        config: [ Release ]
        compiler: [ clang ]
        include:
          - os: ubuntu20
            docker-image: meshlib/meshlib-ubuntu-arm64:${{inputs.docker_image_tag}}
            cxx-compiler: /usr/bin/clang++-11
            c-compiler: /usr/bin/clang-11
            cxx-standard: 20
          - os: ubuntu22
            docker-image: meshlib/meshlib-ubuntu22-arm64:${{inputs.docker_image_tag}}
            cxx-compiler: /usr/bin/clang++-14
            c-compiler: /usr/bin/clang-14
            cxx-standard: 20
          - os: ubuntu24
            docker-image: meshlib/meshlib-ubuntu24-arm64:${{inputs.docker_image_tag}}
            cxx-compiler: /usr/bin/clang++-18
            c-compiler: /usr/bin/clang-18
            cxx-standard: 23
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    env:
      UPLOAD_TEST_ARTIFACTS: ${{ contains(github.event.pull_request.labels.*.name, 'upload-test-artifacts') }}
      INTERNAL_BUILD: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository}}

    steps:
      - name: Work-around possible permission issues
        shell: bash
        run: |
          # NOTE: {GITHUB_WORKSPACE} != {{ github.workspace }}
          # Related issue: https://github.com/actions/runner/issues/2058
          if test -d $GITHUB_WORKSPACE && test -n "$(find ${GITHUB_WORKSPACE} -user root)" ; then
            mv ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}_${RANDOM}
            mkdir ${GITHUB_WORKSPACE}
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout third-party submodules
        run: |
          # have to checkout selective submodules by our own
          # related issue: https://github.com/actions/checkout/issues/1779
          export HOME=${RUNNER_TEMP}
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          git submodule update --init --depth 1 thirdparty/imgui thirdparty/parallel-hashmap

      - name: Install thirdparty libs
        run: |
          ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib
          ln -s /usr/local/lib/meshlib-thirdparty-lib/include ./include

      - name: Install mrbind
        if: ${{inputs.mrbind}}
        run: scripts/mrbind/install_mrbind_ubuntu.sh

      - name: Create virtualenv
        run: |
          python3 -m venv .venv
          # FIXME: self-hosted (on vm) runners are unable to process custom PATH correctly
          #. .venv/bin/activate
          #echo PATH=$PATH >> $GITHUB_ENV

      - name: Setup python requirements
        run: |
          . .venv/bin/activate
          python3 -m pip install -r ./requirements/python.txt

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_BUILD_RELEASE: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Release'] }}
          MESHLIB_BUILD_DEBUG: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Debug'] }}
          CMAKE_CXX_COMPILER: ${{ matrix.cxx-compiler }}
          # not realy needed
          CMAKE_C_COMPILER: ${{ matrix.c-compiler }}
          MR_VERSION: ${{ inputs.app_version }}
          # options to be passed to cmake
          MR_CMAKE_OPTIONS: >
            -DMR_CXX_STANDARD=${{ matrix.cxx-standard }}
            -DMR_PCH_USE_EXTRA_HEADERS=ON
            -DMESHLIB_BUILD_MRMESH_PY_LEGACY=${{ fromJSON('["ON", "OFF"]')[inputs.mrbind] }}

      - name: Generate and build MRBind bindings
        if: ${{inputs.mrbind}}
        env:
          CXX: ${{matrix.cxx-compiler}}
        run: make -f scripts/mrbind/generate.mk MODE=none -B --trace MESHLIB_SHLIB_DIR=build/${{matrix.config}}/bin

      - name: Collect Timings
        run: ./scripts/devops/collect_timing_logs.sh ${{matrix.os}}-arm64 ${{matrix.config}} "${{matrix.compiler}}"

      #Save timing in artifact
      - name: Upload Timings
        uses: actions/upload-artifact@v4
        with:
          name: Timing_Logs_${{matrix.os}}-arm64_${{matrix.config}}_${{matrix.compiler}}
          path: time_log/

      - name: Run Start-and-Exit Tests
        run: MR_LOCAL_RESOURCES=1 xvfb-run -a ./build/${{ matrix.config }}/bin/MeshViewer -hidden -noEventLoop -unloadPluginsAtEnd

      - name: Unit Tests
        run: ./build/${{ matrix.config }}/bin/MRTest

      - name: C Unit Tests
        run: ./build/${{ matrix.config }}/bin/MRTestC

      - name: Python Sanity Tests
        working-directory: ./build/${{ matrix.config }}/bin
        run: |
          . ./../../../.venv/bin/activate
          python3 ./../../../scripts/run_python_test_script.py -d '../test_python'

      - name: Configure AWS Credentials
        if: ${{ env.UPLOAD_TEST_ARTIFACTS == 'true' && env.INTERNAL_BUILD == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::259351611210:role/GitHubMeshLibAwsCredsRole
          aws-region: us-east-1

      # cache managment: https://github.com/MeshInspector/MeshLib/actions/caches
      - name: Cache autotest data from S3 Tests
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository}}
        id: cache-autotest
        uses: actions/cache@v4
        with:
          path: ./test_data
          key: ${{inputs.autotest_data_s3_url}}

      - name: Copy autotest data from S3 Tests
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository}}
        run: aws s3 sync ${{inputs.autotest_data_s3_url}} ./test_data --delete --no-sign-request --size-only

      - name: Python Regression Tests
        env:
          SMOKE: ${{ env.INTERNAL_BUILD == 'true' && inputs.full_config_build == false && matrix.config == 'Debug' }}
          MR_REGRESSION_TESTS_UBUNTUARM2004_MRBIND_ABI_ISSUES: ${{ fromJSON('[0,1]')[matrix.os == 'ubuntu20' && inputs.mrbind] }}
          BINDS_V: ${{ fromJSON('[2,3]')[inputs.mrbind || 0] }}
        if: ${{ env.INTERNAL_BUILD == 'true' }}
        working-directory: ./build/${{ matrix.config }}/bin
        run: |
          . ./../../../.venv/bin/activate
          python3 ./../../../scripts/run_python_test_script.py -d '../test_regression' -s ${{env.SMOKE}} -bv ${{env.BINDS_V}}

      - name: Copy test artifacts to S3
        if: ${{ env.UPLOAD_TEST_ARTIFACTS == 'true' && env.INTERNAL_BUILD == 'true' && !cancelled() }}
        run: aws s3 cp ./pytest_temp 's3://test-artifacts-git/tests/${{github.run_id}}/ubuntu_arm64//${{matrix.os}}' --recursive

      - name: Create Deb
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.compiler }}
        env:
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
        run: |
          ./scripts/distribution.sh ${{inputs.app_version}}
          mv ./distr/meshlib-dev.deb meshlib_${{matrix.os}}-arm64-dev.deb

      - name: Upload Ubuntu Developer Distribution
        if: ${{ inputs.UPLOAD_ARTIFACTS }}
        uses: actions/upload-artifact@v4
        with:
          name: Distributives_${{matrix.os}}_arm64
          path: meshlib_${{matrix.os}}-arm64-dev.deb
          retention-days: 1
