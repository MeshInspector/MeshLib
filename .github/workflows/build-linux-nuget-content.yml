name: Build Linux Nuget Content

# When ran from the github UI, we build the target commit exactly.
# When ran on release, we use the latest tagged commit in the `master` branch.
# This doesn't run directly on pull request, because it's impossible to disable the whole file
#   with a single condition (specific label present). Because of that, we conditionally run this from a separate `.yml` file.

on:
  # This is the `uses:` call from other `.yml` files.
  workflow_call:
    inputs:
      docker_image_tag:
        required: true
        type: string

env:
  # CMake 4 compatibility
  CMAKE_POLICY_VERSION_MINIMUM: 3.5


jobs:
  manylinux-nuget_content-build:
    timeout-minutes: 40
    runs-on: ${{ matrix.runner }}
    container:
      image: meshlib/meshlib-${{matrix.os}}:${{inputs.docker_image_tag || 'latest'}}
      options: ${{ matrix.container-options }}
    strategy:
      matrix:
        platform: ["x86_64"]
        include:
          - platform: "x86_64"
            os: "ubuntu20"
            container-options: "--user root"
            runner: ubuntu-latest
            compiler: /usr/bin/clang++-11

    steps:
      - name: Work-around possible permission issues
        shell: bash
        run: |
          # NOTE: {GITHUB_WORKSPACE} != {{ github.workspace }}
          # Related issue: https://github.com/actions/runner/issues/2058
          if test -d $GITHUB_WORKSPACE && test -n "$(find ${GITHUB_WORKSPACE} -user root)" ; then
            mv ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}_${RANDOM}
            mkdir ${GITHUB_WORKSPACE}
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout third-party submodules
        # Some of those safe.directory rules could be redudant.
        run: |
          # have to checkout selective submodules by our own
          # related issue: https://github.com/actions/checkout/issues/1779
          export HOME=${RUNNER_TEMP}
          echo ${GITHUB_WORKSPACE}
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          git config --global --add safe.directory ${GITHUB_WORKSPACE}/thirdparty/imgui
          git config --global --add safe.directory ${GITHUB_WORKSPACE}/thirdparty/parallel-hashmap
          git config --global --add safe.directory ${GITHUB_WORKSPACE}/thirdparty/mrbind-pybind11
          git config --global --add safe.directory ${GITHUB_WORKSPACE}/thirdparty/mrbind
          git submodule update --init --depth 1 thirdparty/imgui thirdparty/parallel-hashmap thirdparty/mrbind-pybind11 thirdparty/mrbind

      - name: Install thirdparty libs
        # Also print the amount of RAM. If there's not enough RAM, building MRBind bindings can fail. Not doing it in that step, because OOM fails can erase logs from the current step.
        run: |
          ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib
          ln -s /usr/local/lib/meshlib-thirdparty-lib/include ./include
          free -h

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
          # When using Clang 11 on Ubuntu Arm 20.04, we get some obscure ABI issues that fail some tests,
          # see the comments in `test_regression/test_algorithms/test_decimate.py` for more details.
          CMAKE_CXX_COMPILER: ${{matrix.compiler}}
          # FIXME: OpenGL libraries are included to wheel packages when the XDE module is used
          # Enabling `-allow-unsupported-compiler` because we use Clang 18 on Arm, while Cuda supports at most 16.
          MR_CMAKE_OPTIONS: >
            -DMESHLIB_PYTHON_SUPPORT=OFF
            -DMESHLIB_BUILD_MRVIEWER=OFF
            -DMESHLIB_BUILD_MESHVIEWER=OFF
            -DMESHLIB_BUILD_PYTHON_MODULES=OFF
            -DMESHLIB_BUILD_MESHCONV=OFF
            -DMESHLIB_BUILD_MRCUDA=OFF
            -DBUILD_TESTING=OFF
            -DMRIOEXTRAS_OPENCASCADE_USE_XDE=OFF
            ${{ fromJSON('["", "-DCMAKE_CUDA_FLAGS=-allow-unsupported-compiler"]')[matrix.platform == 'aarch64'] }}

      - name: Python setup
        env:
          ALLOW_DELETING_EXISTING_PYTHON: 1
        run: |
          scripts/mrbind-pybind11/install_all_python_versions_ubuntu.sh

      - name: Create and fix fake Wheel
        shell: bash
        run: |
          python3.12 -m venv ./wheel_venv
          source ./wheel_venv/bin/activate
          python3.12 ./scripts/nuget_patch/patch_linux_so.py "./build/Release/bin/" "./patched_content/"

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DotNetPatchArchiveLinux-${{matrix.platform}}
          path: ./patched_content/*
          retention-days: 1
