name: Post Release Tests

on:
  workflow_dispatch:
  workflow_call:

jobs:
  setup:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

  pip-test-linux:
    needs: setup
    timeout-minutes: 20
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{matrix.container-prefix}}${{matrix.os}}
      options: ${{ matrix.container-options }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["x86_64", "aarch64"]
        os: ["ubuntu:20.04", "ubuntu:22.04", "debian:11-slim", "fedora:37"]
        include:
          - platform: "x86_64"
            runner: ubuntu-latest
            container-options: "--user root"
            container-prefix: ""
          - platform: "aarch64"
            runner: [ 'self-hosted', 'linux-arm64' ]
            container-options: "--user root"
            container-prefix: "arm64v8/"
          - os: "ubuntu:20.04"
            py-version: "3.8"
            py-cmd: "python3.8"
          - os: "ubuntu:22.04"
            py-version: "3.10"
            py-cmd: "python3.10"
          - os: "debian:11-slim"
            py-version: "3.9"
            py-cmd: "python3.9"
          - os: "fedora:37"
            py-version: "3.11"
            py-cmd: "python3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Ubuntu system setup
        if: ${{ matrix.os == 'ubuntu:20.04' || matrix.os == 'ubuntu:22.04' || matrix.os == 'debian:11-slim' }}
        run: apt -y update && apt -y upgrade && apt -y install curl libssl-dev python3-distutils python3-pip

      - name: Fedora 37 system setup
        if: ${{matrix.os == 'fedora:37'}}
        run: dnf -y install python3 pip

      - name: Pip setup
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip install pytest

      - name: Meshlib wheel install
        run:  ${{ matrix.py-cmd }} -m pip install meshlib

      - name: Run Python tests
        working-directory: test_python
        run: ${{ matrix.py-cmd }} -m pytest -s -v

  pip-test-windows:
    needs: setup
    timeout-minutes: 20
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        py-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py-version }}

      - name: Pip setup
        run: |
          py -${{matrix.py-version}} -m pip install --upgrade pip
          py -${{matrix.py-version}} -m pip install pytest 
          py -${{matrix.py-version}} -m pip install meshlib

      - name: Run Python tests
        working-directory: test_python
        run: py -${{matrix.py-version}} -m pytest -s -v

  pip-test-macos:
    needs: setup
    timeout-minutes: 20
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        py-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Python setup
        if: ${{ matrix.py-version != '3.11' }}
        run: brew install python@${{matrix.py-version}}

      - name: Pip setup
        run: |
          python${{matrix.py-version}} -m pip install --upgrade pip
          python${{matrix.py-version}} -m pip install pytest

      - name: Meshlib wheel install
        run:  python${{matrix.py-version}} -m pip install meshlib

      - name: Run Python tests
        working-directory: test_python
        run: python${{matrix.py-version}} -m pytest -s -v
