FROM ubuntu:24.04 AS build

# update and install req
RUN export DEBIAN_FRONTEND=noninteractive; \
    export DEBCONF_NONINTERACTIVE_SEEN=true; \
    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \
    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \
    apt-get update -qqy \
 && apt-get install -qqy --no-install-recommends \
        tzdata git sudo time python3-pip \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

RUN mkdir /home/MeshLib
WORKDIR "/home/MeshLib"

# copy files
COPY .git .git
COPY thirdparty thirdparty
COPY scripts scripts
COPY source source
COPY requirements requirements

# build and install thirdparty
ENV MR_STATE=DOCKER_BUILD
RUN ./scripts/build_thirdparty.sh

# ------------------------------------------------------------------------ #
# nvidea-base
FROM ubuntu:24.04 as base

ENV NVARCH x86_64

ENV NVIDIA_REQUIRE_CUDA "cuda>=12.3 brand=tesla,driver>=470,driver<471 brand=unknown,driver>=470,driver<471 brand=nvidia,driver>=470,driver<471 brand=nvidiartx,driver>=470,driver<471 brand=geforce,driver>=470,driver<471 brand=geforcertx,driver>=470,driver<471 brand=quadro,driver>=470,driver<471 brand=quadrortx,driver>=470,driver<471 brand=titan,driver>=470,driver<471 brand=titanrtx,driver>=470,driver<471 brand=tesla,driver>=525,driver<526 brand=unknown,driver>=525,driver<526 brand=nvidia,driver>=525,driver<526 brand=nvidiartx,driver>=525,driver<526 brand=geforce,driver>=525,driver<526 brand=geforcertx,driver>=525,driver<526 brand=quadro,driver>=525,driver<526 brand=quadrortx,driver>=525,driver<526 brand=titan,driver>=525,driver<526 brand=titanrtx,driver>=525,driver<526 brand=tesla,driver>=535,driver<536 brand=unknown,driver>=535,driver<536 brand=nvidia,driver>=535,driver<536 brand=nvidiartx,driver>=535,driver<536 brand=geforce,driver>=535,driver<536 brand=geforcertx,driver>=535,driver<536 brand=quadro,driver>=535,driver<536 brand=quadrortx,driver>=535,driver<536 brand=titan,driver>=535,driver<536 brand=titanrtx,driver>=535,driver<536"
ENV NV_CUDA_CUDART_VERSION 12.3.101-1
ENV NV_CUDA_COMPAT_PACKAGE cuda-compat-12-3

#LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"

RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSLO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/${NVARCH}/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION 12.3.2

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-12-3=${NV_CUDA_CUDART_VERSION} \
    ${NV_CUDA_COMPAT_PACKAGE} \
    && rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

# -------------------- #
# nvidea-runtime


ENV NV_CUDA_LIB_VERSION 12.3.2-1


ENV NV_NVTX_VERSION 12.3.101-1
ENV NV_LIBNPP_VERSION 12.2.3.2-1
ENV NV_LIBNPP_PACKAGE libnpp-12-3=${NV_LIBNPP_VERSION}
ENV NV_LIBCUSPARSE_VERSION 12.2.0.103-1

ENV NV_LIBCUBLAS_PACKAGE_NAME libcublas-12-3
ENV NV_LIBCUBLAS_VERSION 12.3.4.1-1
ENV NV_LIBCUBLAS_PACKAGE ${NV_LIBCUBLAS_PACKAGE_NAME}=${NV_LIBCUBLAS_VERSION}

ENV NV_LIBNCCL_PACKAGE_NAME libnccl2
ENV NV_LIBNCCL_PACKAGE_VERSION 2.20.3-1
ENV NCCL_VERSION 2.20.3-1
ENV NV_LIBNCCL_PACKAGE ${NV_LIBNCCL_PACKAGE_NAME}=${NV_LIBNCCL_PACKAGE_VERSION}+cuda12.3


#LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-12-3=${NV_CUDA_LIB_VERSION} \
    ${NV_LIBNPP_PACKAGE} \
    cuda-nvtx-12-3=${NV_NVTX_VERSION} \
    libcusparse-12-3=${NV_LIBCUSPARSE_VERSION} \
    ${NV_LIBCUBLAS_PACKAGE} \
    ${NV_LIBNCCL_PACKAGE} \
    && rm -rf /var/lib/apt/lists/*

# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold ${NV_LIBCUBLAS_PACKAGE_NAME} ${NV_LIBNCCL_PACKAGE_NAME}

ENV NVIDIA_PRODUCT_NAME="CUDA"

# -------------------- #
# nvidea-devel


ENV NV_CUDA_LIB_VERSION "12.3.2-1"

ENV NV_CUDA_CUDART_DEV_VERSION 12.3.101-1
ENV NV_NVML_DEV_VERSION 12.3.101-1
ENV NV_LIBCUSPARSE_DEV_VERSION 12.2.0.103-1
ENV NV_LIBNPP_DEV_VERSION 12.2.3.2-1
ENV NV_LIBNPP_DEV_PACKAGE libnpp-dev-12-3=${NV_LIBNPP_DEV_VERSION}

ENV NV_LIBCUBLAS_DEV_VERSION 12.3.4.1-1
ENV NV_LIBCUBLAS_DEV_PACKAGE_NAME libcublas-dev-12-3
ENV NV_LIBCUBLAS_DEV_PACKAGE ${NV_LIBCUBLAS_DEV_PACKAGE_NAME}=${NV_LIBCUBLAS_DEV_VERSION}

ENV NV_CUDA_NSIGHT_COMPUTE_VERSION 12.3.2-1
ENV NV_CUDA_NSIGHT_COMPUTE_DEV_PACKAGE cuda-nsight-compute-12-3=${NV_CUDA_NSIGHT_COMPUTE_VERSION}

ENV NV_NVPROF_VERSION 12.3.101-1
ENV NV_NVPROF_DEV_PACKAGE cuda-nvprof-12-3=${NV_NVPROF_VERSION}

ENV NV_LIBNCCL_DEV_PACKAGE_NAME libnccl-dev
ENV NV_LIBNCCL_DEV_PACKAGE_VERSION 2.20.3-1
ENV NCCL_VERSION 2.20.3-1
ENV NV_LIBNCCL_DEV_PACKAGE ${NV_LIBNCCL_DEV_PACKAGE_NAME}=${NV_LIBNCCL_DEV_PACKAGE_VERSION}+cuda12.3

# LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-dev-12-3=${NV_CUDA_CUDART_DEV_VERSION} \
    cuda-command-line-tools-12-3=${NV_CUDA_LIB_VERSION} \
    cuda-minimal-build-12-3=${NV_CUDA_LIB_VERSION} \
    cuda-libraries-dev-12-3=${NV_CUDA_LIB_VERSION} \
    cuda-nvml-dev-12-3=${NV_NVML_DEV_VERSION} \
    ${NV_NVPROF_DEV_PACKAGE} \
    ${NV_LIBNPP_DEV_PACKAGE} \
    libcusparse-dev-12-3=${NV_LIBCUSPARSE_DEV_VERSION} \
    ${NV_LIBCUBLAS_DEV_PACKAGE} \
    ${NV_LIBNCCL_DEV_PACKAGE} \
    ${NV_CUDA_NSIGHT_COMPUTE_DEV_PACKAGE} \
    && rm -rf /var/lib/apt/lists/*

# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold ${NV_LIBCUBLAS_DEV_PACKAGE_NAME} ${NV_LIBNCCL_DEV_PACKAGE_NAME}
ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs

# ------------------------------------------------------------------------ #


RUN mkdir /usr/local/lib/meshlib-thirdparty-lib/
WORKDIR "/usr/local/lib/meshlib-thirdparty-lib/"

COPY scripts/install_apt_requirements.sh scripts/install_apt_requirements.sh
COPY scripts/install_thirdparty.sh scripts/install_thirdparty.sh
COPY scripts/patches scripts/patches
COPY requirements requirements

COPY --from=build /home/MeshLib/lib /usr/local/lib/meshlib-thirdparty-lib/lib
COPY --from=build /home/MeshLib/include /usr/local/lib/meshlib-thirdparty-lib/include

ENV MR_STATE=DOCKER_BUILD

# update and install req
RUN export DEBIAN_FRONTEND=noninteractive; \
    export DEBCONF_NONINTERACTIVE_SEEN=true; \
    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \
    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \
    apt-get update -qqy \
 && apt-get install -qqy --no-install-recommends \
        tzdata git sudo time python3-pip xvfb curl wget unzip \
 && ./scripts/install_apt_requirements.sh \
 && curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
 && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
 && apt-get update -y \
 && apt-get install -y gh g++-12 clang-14 \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

#update cmake
RUN apt remove --purge --auto-remove -y cmake \
 && apt update \
 && apt install -y software-properties-common lsb-release \
 && apt clean all \
 && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
 && apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" \
 && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 42D5A192B819C5DA \
 && apt update \
 && apt install -y kitware-archive-keyring \
 && rm /etc/apt/trusted.gpg.d/kitware.gpg \
 && apt update \
 && apt install -y cmake

RUN ./scripts/install_thirdparty.sh && \
    echo '/usr/local/lib' | tee -a  /etc/ld.so.conf && \
    sudo ldconfig

# install aws cli
RUN ARCH=$(uname -m) && \
    case $ARCH in \
        x86_64) ARCH_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" ;; \
        aarch64) ARCH_URL="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" ;; \
        *) echo "Unsupported architecture: $ARCH" && exit 1 ;; \
    esac && \
    curl "$ARCH_URL" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

# Add a new user "actions-runner" with user id 8877
RUN useradd -u 8877 -m user

# Change to non-root privilege
USER user
