name: Test Distribution

on:
  workflow_call:
    inputs:
      release_tag:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true

jobs:
  linux-x64-test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu:20.04", "ubuntu:22.04", "ubuntu:24.04" ]
        include:
          - os: "ubuntu:20.04"
            name: "ubuntu20"
            compiler: clang-11
            c-compiler: /usr/bin/clang-11
            cxx-compiler: /usr/bin/clang++-11
          - os: "ubuntu:22.04"
            name: "ubuntu22"
            compiler: clang-14
            c-compiler: /usr/bin/clang-14
            cxx-compiler: /usr/bin/clang++-14
          - os: "ubuntu:24.04"
            name: "ubuntu24"
            compiler: clang-18
            c-compiler: /usr/bin/clang-18
            cxx-compiler: /usr/bin/clang++-18

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Install GitHub CLI
        run: |
          if [ -f /etc/debian_version ]; then
            apt-get update && apt-get install -y curl sudo
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            apt-get update
            apt-get install -y gh
          elif [ -f /etc/redhat-release ]; then
            sudo dnf install -y git 'dnf-command(config-manager)'
            sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
            sudo dnf install gh -y --repo gh-cli
          fi

      - name: Download Ubuntu x86-64 Release
        run: |
          echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token
          gh release download ${{ inputs.release_tag }} --pattern "*${{matrix.name}}-dev.deb" --repo ${{ github.repository }}

      - name: Install Ubuntu x86-64 Release
        run: |
          export DEBIAN_FRONTEND=noninteractive && apt-get -y update && apt-get -y upgrade && \
            apt-get -y install sudo xvfb curl libssl-dev python3-pip && \
            apt-get -y install libstdc++-10-dev && \
            apt-get -y install ./*${{matrix.name}}-dev.deb

      - name: Create virtualenv
        run: |
          python3 -m venv .venv
          . .venv/bin/activate
          echo $PATH >> $GITHUB_PATH

      - name: Install Python requirements
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade -r ./requirements/python.txt

      - name: Install supported compiler
        run: |
          apt-get -y install ${{ matrix.compiler }}

      - name: Run MeshViewer
        if: always()
        run: xvfb-run -a MeshViewer -hidden -noEventLoop -unloadPluginsAtEnd

      - name: Show meshconv help
        if: always()
        run: meshconv --help

      - name: Build C++ examples
        if: always()
        working-directory: examples/cpp-examples
        run: |
          mkdir build && \
          cd build && \
          cmake .. -DCMAKE_CXX_COMPILER=${{matrix.cxx-compiler}} && \
          cmake --build . && \
          ./MeshModification

      - name: Build C examples
        if: always()
        working-directory: examples/c-examples
        run: |
          cmake -S . -B build -DCMAKE_C_COMPILER=${{matrix.c-compiler}} && \
          cmake --build build

      - name: Ubuntu python test
        if: ${{ always() }}
        env:
          PYTHONPATH: /usr/local/lib/MeshLib/
        working-directory: test_python
        run: python3 -m pytest -s -v

  linux-arm64-test:
    timeout-minutes: 30
    runs-on: [self-hosted, linux-arm64, spot, meshinspector]
    container:
      image: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu:20.04", "ubuntu:22.04", "ubuntu:24.04" ]
        include:
          - os: "ubuntu:20.04"
            name: "ubuntu20"
            compiler: clang-11
            c-compiler: /usr/bin/clang-11
            cxx-compiler: /usr/bin/clang++-11
          - os: "ubuntu:22.04"
            name: "ubuntu22"
            compiler: clang-14
            c-compiler: /usr/bin/clang-14
            cxx-compiler: /usr/bin/clang++-14
          - os: "ubuntu:24.04"
            name: "ubuntu24"
            compiler: clang-18
            c-compiler: /usr/bin/clang-18
            cxx-compiler: /usr/bin/clang++-18

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Install GitHub CLI
        run: |
          apt-get update && apt-get install -y curl sudo
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update
          apt-get install -y gh

      - name: Download Ubuntu arm64 Release
        run: |
          echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token
          gh release download ${{ inputs.release_tag }} --pattern "*${{matrix.name}}-arm64-dev.deb" --repo ${{ github.repository }}

      - name: Install Ubuntu arm64 Release
        run: |
          export DEBIAN_FRONTEND=noninteractive && apt-get -y update && apt-get -y upgrade && \
            apt-get -y install sudo xvfb curl libssl-dev python3-pip && \
            apt-get -y install libstdc++-10-dev && \
            apt-get -y install ./*${{matrix.name}}-arm64-dev.deb

      - name: Create virtualenv
        run: |
          python3 -m venv .venv
          . .venv/bin/activate
          echo $PATH >> $GITHUB_PATH

      - name: Install Python requirements
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade -r ./requirements/python.txt

      - name: Install supported compiler
        run: apt-get -y install ${{ matrix.compiler }}

      - name: Run MeshViewer
        if: always()
        run: xvfb-run -a MeshViewer -hidden -noEventLoop -unloadPluginsAtEnd

      - name: Show meshconv help
        if: always()
        run: meshconv --help

      - name: Build C++ examples
        if: always()
        working-directory: examples/cpp-examples
        run: |
          mkdir build && \
          cd build && \
          cmake .. -DCMAKE_CXX_COMPILER=${{matrix.cxx-compiler}} && \
          cmake --build . && \
          ./MeshModification

      - name: Build C examples
        if: always()
        working-directory: examples/c-examples
        run: |
          cmake -S . -B build -DCMAKE_C_COMPILER=${{matrix.c-compiler}} && \
          cmake --build build

      - name: Ubuntu python test
        if: always()
        env:
          PYTHONPATH: /usr/local/lib/MeshLib/
        working-directory: test_python
        run: python3 -m pytest -s -v

  macos-test:
    runs-on: macos-13
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Download Distributive
        run: |
          echo ${{ secrets.GH_TOKEN }} | gh auth login --with-token
          gh release download ${{ inputs.release_tag }} --pattern "*x64.pkg" --repo ${{ github.repository }}

      - name: Install Pkg
        run: |
          sudo installer -pkg meshlib_*x64.pkg  -target /
          xargs brew install < /Library/Frameworks/MeshLib.framework/Versions/Current/requirements/macos.txt

      # [error] NSGL: Failed to find a suitable pixel format
      #- name: Run MeshViewer
        #if: always()
        #run: /Library/Frameworks/MeshLib.framework/Versions/Current/bin/MeshViewer -tryHidden -noEventLoop -unloadPluginsAtEnd

      - name: Show meshconv help
        if: always()
        run: /Library/Frameworks/MeshLib.framework/Versions/Current/bin/meshconv --help

      - name: Build C++ examples
        if: always()
        working-directory: examples/cpp-examples
        run: |
          mkdir build && \
          cd build && \
          cmake .. -DCMAKE_CXX_COMPILER=/usr/bin/clang++ && \
          cmake --build . && \
          ./MeshModification

      - name: Build C examples
        if: always()
        working-directory: examples/c-examples
        run: |
          cmake -S . -B build -DCMAKE_C_COMPILER=/usr/bin/clang && \
          cmake --build build
