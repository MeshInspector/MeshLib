name: Build Pip Wheels

on:
  release:
    types: [ published ]
  workflow_dispatch:

env:
  VCPKG-VERSION: '2024.01.12'
  CUDA-VERSION: '11.4.2.47141'
  CUDA-MAJOR: '11'
  CUDA-MINOR: '4'


jobs:
  setup:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

  macos-pip-build:
    needs: setup
    timeout-minutes: 60
    runs-on: ${{ matrix.instance }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["x86", "arm64"]
        py-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        include:
          - platform: "x86"
            plat-name: macosx_12_0_x86_64
            instance: macos-12
          - platform: "arm64"
            plat-name: macosx_12_0_arm64
            instance: macos-arm-build
          - py-version: "3.8"
            py-tag: "cp38"
            py-cmd: "python3.8"
          - py-version: "3.9"
            py-tag: "cp39"
            py-cmd: "python3.9"
          - py-version: "3.10"
            py-tag: "cp310"
            py-cmd: "python3.10"
          - py-version: "3.11"
            py-tag: "cp311"
            py-cmd: "python3.11"
          - py-version: "3.12"
            py-tag: "cp312"
            py-cmd: "python3.12"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Fix links x86
        if: ${{ matrix.platform == 'x86' }}
        run: |
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          sudo rm -rf /Library/Frameworks/Python.framework/
          brew install --force python@${{ matrix.py-version }} && brew unlink python@${{ matrix.py-version }} && brew unlink python@${{ matrix.py-version }} && brew link --overwrite python@${{ matrix.py-version }}

      - name: Fix links ARM
        if: ${{ matrix.platform == 'arm64' }}
        run: |
          find /opt/homebrew/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          rm -rf /Library/Frameworks/Python.framework/
          brew install --force python@${{ matrix.py-version }} && brew unlink python@${{ matrix.py-version }} && brew unlink python@${{ matrix.py-version }} && brew link --overwrite python@${{ matrix.py-version }}

      - name: Create virtualenv
        run: |
          ${{ matrix.py-cmd }} -m venv .venv
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
      
      - name: Python setup
        run: |
          curl -sS https://bootstrap.pypa.io/get-pip.py | ${{ matrix.py-cmd }}
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt
          ${{ matrix.py-cmd }} -m pip install pytest
          ${{ matrix.py-cmd }} -m pip uninstall -y meshlib

      - name: Install thirdparty libs
        run: ./scripts/build_thirdparty.sh

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_PYTHON_VERSION: ${{matrix.py-version}}
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
          CMAKE_CXX_COMPILER: /usr/bin/clang++
          # not realy needed
          CMAKE_C_COMPILER: /usr/bin/clang

      - name: Unit Tests
        run: ./build/Release/bin/MRTest

      - name: Python Tests
        working-directory: ./build/Release/bin
        run: ${{ matrix.py-cmd }} ./../../../scripts/run_python_test_script.py -cmd ${{ matrix.py-cmd }}

      - name: Create and fix Wheel
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip install --upgrade wheel setuptools delocate pybind11-stubgen
          ${{ matrix.py-cmd }} ./scripts/wheel/setup_workspace.py
          cd ./scripts/wheel/meshlib
          head $(which pybind11-stubgen)
          PYTHONPATH=. pybind11-stubgen --output-dir . meshlib.mrmeshpy
          PYTHONPATH=. pybind11-stubgen --output-dir . meshlib.mrmeshnumpy
          PYTHONPATH=. pybind11-stubgen --output-dir . meshlib.mrviewerpy
          ${{ matrix.py-cmd }} setup.py bdist_wheel --plat-name=${{matrix.plat-name}} --python-tag=${{matrix.py-tag}} --version ${{needs.setup.outputs.version_tag}}
          delocate-path meshlib
          cd ../../..
          delocate-wheel -w . -v ./scripts/wheel/meshlib/dist/*.whl

      - name: Upload to Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Macos-${{ matrix.py-cmd }}
          path: meshlib-*.whl
          retention-days: 1

      - name: Upload to Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Wheelhouse
          path: meshlib-*.whl
          retention-days: 1

  macos-pip-test:
    needs: [setup, macos-pip-build]
    timeout-minutes: 20
    runs-on: ${{ matrix.instance }}
    strategy:
      fail-fast: false
      matrix:
        platform: ["arm64", "x86"]
        py-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - platform: "x86"
            plat-name: macosx_12_0_x86_64
            instance: macos-12
          - platform: "arm64"
            plat-name: macosx_12_0_arm64
            instance: macos-arm-build
          - py-version: "3.8"
            py-cmd: "python3.8"
          - py-version: "3.9"
            py-cmd: "python3.9"
          - py-version: "3.10"
            py-cmd: "python3.10"
          - py-version: "3.11"
            py-cmd: "python3.11"
          - py-version: "3.12"
            py-cmd: "python3.12"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python setup
        if: ${{ !(matrix.platform == 'x86' && ( matrix.py-version == '3.11' || matrix.py-version == '3.12' ) ) }}
        run: brew install python@${{matrix.py-version}}

      - name: Create virtualenv
        run: |
          ${{ matrix.py-cmd }} -m venv .venv
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Pip setup
        run: |
          ${{ matrix.py-cmd }} -m pip install --upgrade pip
          ${{ matrix.py-cmd }} -m pip uninstall -y meshlib
          ${{ matrix.py-cmd }} -m pip install --upgrade -r ./requirements/python.txt
          ${{ matrix.py-cmd }} -m pip install pytest

      - name: Download Meshlib wheel from Artifact
        uses: actions/download-artifact@v3
        with:
          name: Macos-${{ matrix.py-cmd }}

      - name: Meshlib wheel install
        run: ${{ matrix.py-cmd }} -m pip install ${{ matrix.pip-options }} ./meshlib-*${{matrix.platform}}*.whl

      - name: Run Python tests
        working-directory: test_python
        run: ${{ matrix.py-cmd }} -m pytest -s -v

  delete-artifacts:
    timeout-minutes: 5
    runs-on: ubuntu-20.04
    needs: [macos-pip-test]
    if: always()
    steps:
      - name: Delete Wheelhouse
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Wheelhouse
          failOnError: false

      - name: Delete all ManyLinux
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ManyLinux-*
          failOnError: false

      - name: Delete all Windows
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Windows-*
          failOnError: false

      - name: Delete all Macos
        uses: geekyeggo/delete-artifact@v2
        with:
          name: Macos-*
          failOnError: false
