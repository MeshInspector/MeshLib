# This is a basic workflow to help you get started with Actions

name: Build Test Distribute

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#UPLOAD_ARTIFACTS condition: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

jobs:
  prepare-image:
    uses: MeshInspector/MeshLib/.github/workflows/prepare-images.yml@master
    secrets:
      BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  windows-build-test:
    needs: [ prepare-image ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-windows.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.windows_image_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  ubuntu20-build-test:
    needs: [ prepare-image ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-ubuntu20.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  ubuntu22-build-test:
    needs: [ prepare-image ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-ubuntu22.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  fedora35-build-test:
    needs: [ prepare-image ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-fedora35.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  emscripten-build-test:
    needs: [ prepare-image ]
    uses: MeshInspector/MeshLib/.github/workflows/build-test-emscripten.yml@master
    with:
      image_tag: ${{needs.prepare-image.outputs.image_tag}}
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  macos-build-test:
    uses: MeshInspector/MeshLib/.github/workflows/build-test-macos.yml@master
    with:
      UPLOAD_ARTIFACTS: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}

  versioning-and-release-url:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    needs: [windows-build-test, ubuntu20-build-test, ubuntu22-build-test, fedora35-build-test]
    uses: MeshInspector/MeshLib/.github/workflows/versioning-release.yml@master
    with:
      version-namespace: ${{ contains(github.event.pull_request.labels.*.name, 'full-ci') && github.event_name != 'push' && 'pr-test' || '' }}
    secrets:
      BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}

  update-win-version:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    timeout-minutes: 15
    runs-on: windows-2019
    needs: [versioning-and-release-url]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive

      - name: Download Windows Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: WindowsArchive

      - name: Extract Windows Binaries
        run: |
          tar -xvzf MREDist_Release.zip
          tar -xvzf MREDist_Debug.zip

      - name: Make Install Folder
        run: py -3.10 scripts\make_install_folder.py ${{needs.versioning-and-release-url.outputs.version_tag}}

      - name: Distribute
        run: py -3.10 scripts\zip_distribution.py MeshLibDist.zip

      - name: Upload Windows Distribution
        uses: actions/upload-artifact@v2
        with:
          name: Distributives
          path: MeshLibDist.zip
          retention-days: 1
          
  update-deb-version:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [versioning-and-release-url, prepare-image]
    strategy:
      fail-fast: false
      matrix:
        os: [ 'Ubuntu20', 'Ubuntu22' ]
        include:
          - os: Ubuntu20
            image: meshrus/meshlib-ubuntu
          - os: Ubuntu22
            image: meshrus/meshlib-ubuntu22

    container:
      image: ${{ matrix.image }}:${{needs.prepare-image.outputs.image_tag}}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive

      - name: Install thirdparty libs
        run: ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib

      - name: Download Ubuntu Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.os}}ReleaseBinArchive

      - name: Extract Ubuntu Binaries Archive
        run: tar -xvf ${{matrix.os}}ReleaseBin.tar

      - name: Create Deb
        env:
          MESHRUS_BUILD_RELEASE: ON
          MESHRUS_BUILD_DEBUG: OFF
        run: |
          ./scripts/distribution.sh ${{needs.versioning-and-release-url.outputs.version_tag}}
          mv ./distr/meshlib-dev.deb meshlib-${{matrix.os}}-dev.deb

      - name: Upload Ubuntu Developer Distribution
        uses: actions/upload-artifact@v2
        with:
          name: Distributives
          path: meshlib-${{matrix.os}}-dev.deb
          retention-days: 1

      - name: Create and fix Wheel
        if: ${{ matrix.os == 'Ubuntu20' }}
        run: |
          curl http://nixos.org/releases/patchelf/patchelf-0.10/patchelf-0.10.tar.bz2 -L -o patchelf-0.10.tar.bz2
          tar xf patchelf-0.10.tar.bz2
          cd patchelf-0.10
          ./configure
          make install
          cd ..
          python3 -m pip install --upgrade pip
          ./scripts/wheel/create_wheel.sh manylinux_2_31_x86_64 ${{needs.versioning-and-release-url.outputs.version_tag}}
          mv ./scripts/wheel/meshlib/wheelhouse/*.whl ./

      - name: Upload Wheel to Artifacts
        if: ${{ matrix.os == 'Ubuntu20' }}
        uses: actions/upload-artifact@v2
        with:
          name: Wheelhouse
          path: meshlib-*.whl
          retention-days: 1

      - name: Upload Wheel to Distributive
        if: ${{ matrix.os == 'Ubuntu20' }}
        uses: actions/upload-artifact@v2
        with:
          name: Distributives
          path: meshlib-*.whl
          retention-days: 1

  update-rpm-version:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [versioning-and-release-url, prepare-image]
    container:
      image: meshrus/meshlib-fedora:${{needs.prepare-image.outputs.image_tag}}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive

      - name: Install thirdparty libs
        run: ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib

      - name: Download Fedora Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: RpmReleaseBinArchive

      - name: Extract Fedora Binaries Archive
        run: tar -xvf RpmReleaseBin.tar

      - name: Create RPM
        run: ./scripts/distribution_rpm.sh ${{needs.versioning-and-release-url.outputs.version_tag}}
        env:
          MESHRUS_BUILD_RELEASE: ON
          MESHRUS_BUILD_DEBUG: OFF

      - name: Upload Fedora Developer Distribution
        uses: actions/upload-artifact@v2
        with:
          name: Distributives
          path: meshlib-dev.rpm
          retention-days: 1

  upload-distributions:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [versioning-and-release-url, update-win-version, update-deb-version, update-rpm-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download All Developer Distributives
        uses: actions/download-artifact@v2
        with:
          name: Distributives

      - name: Rename Distributives
        run: |
          mv MeshLibDist.zip MeshLibDist_${{needs.versioning-and-release-url.outputs.version_tag}}.zip
          mv meshlib-Ubuntu20-dev.deb meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu20-dev.deb
          mv meshlib-Ubuntu22-dev.deb meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu22-dev.deb
          mv meshlib-dev.rpm meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.rpm

      - name: Upload Distributives
        run: |
          echo ${{ secrets.BUILD_MACHINE_TOKEN }} | gh auth login --with-token
          gh release upload ${{needs.versioning-and-release-url.outputs.version}} \
                            MeshLibDist_${{needs.versioning-and-release-url.outputs.version_tag}}.zip \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu20-dev.deb \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}_ubuntu22-dev.deb \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.rpm \
                            meshlib-*.whl

  upload-wheels:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'full-ci') }}
    needs: [versioning-and-release-url, update-win-version, update-deb-version, update-rpm-version]
    uses: MeshInspector/MeshLib/.github/workflows/upload-wheels.yml@master
    with:
      deploy_type: "test"
    secrets: inherit

  update-artifacts:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    needs: [ upload-distributions, upload-wheels ]
    if: always()
    steps:
        # all Windows
      - name: Delete Windows Debug Install Archive artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: WindowsArchive
          failOnError: false
          
        # all Ubuntu
      - name: Delete Ubuntu20 Binaries artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Ubuntu20ReleaseBinArchive
          failOnError: false

      - name: Delete Ubuntu22 Binaries artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Ubuntu22ReleaseBinArchive
          failOnError: false

        # all Fedorsa
      - name: Delete Fedora Binaries artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: RpmReleaseBinArchive
          failOnError: false

      # Distributives
      - name: Delete Distribution
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Distributives
          failOnError: false

      - name: Delete Wheelhouse
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Wheelhouse
          failOnError: false

      # generate timing logs archive
      - name: Download Timing Logs Archive
        uses: actions/download-artifact@v3
        with:
          name: Timing_Logs

      - name: Generate Timing Logs Archive
        run: tar -cvzf time_log.tar.gz ./*.csv

      - name: Upload Timing Logs Archive
        uses: actions/upload-artifact@v3
        with:
          name: time_log
          path: time_log.tar.gz
          retention-days: 1

      - name: Delete Timing Logs Source
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Timing_Logs
          failOnError: false
