# This is a basic workflow to help you get started with Actions

name: Build Test Distribute

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare-image:
    uses: MeshInspector/MeshLib/.github/workflows/prepare-images.yml@master
    secrets:
      BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  windows-build-test:
    timeout-minutes: 40
    needs: [prepare-image]
    runs-on: windows-2019
    strategy:
      matrix:
        config: [Debug, Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Start container
        run: docker run -d --name meshlib-win --workdir C:\workspace\MeshLib\MeshLib -v ${{ github.workspace }}\..\..:C:\workspace meshrus/meshlib-windows:${{needs.prepare-image.outputs.image_tag}} ping -t localhost

      - name: Build
        run: |
          docker exec meshlib-win C:\vcpkg\vcpkg.exe integrate install
          docker exec meshlib-win C:\Temp\vcbuildtools\\MSBuild\Current\Bin\MSBuild.exe source\MeshLib.sln -p:Configuration=${{ matrix.config }}

      - name: Unit Tests
        run: docker exec meshlib-win py -3 scripts\run_unit_test_script.py ${{ matrix.config }}

      - name: Python Tests
        run: docker exec -w C:\workspace\MeshLib\MeshLib\source\x64\${{ matrix.config }} meshlib-win py -3 ..\..\..\scripts\run_python_test_script.py

      - name: Archive files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ github.event_name == 'push' }}
        run: tar -a -c -f MREDist_${{ matrix.config }}.zip ./source/x64/${{matrix.config}}

      - name: Upload Windows Binaries Archive
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: WindowsArchive${{ matrix.config }}
          path: MREDist_${{ matrix.config }}.zip
          retention-days: 1

  ubuntu-build-test:
    timeout-minutes: 40
    needs: [prepare-image]
    runs-on: ubuntu-latest
    container:
      image: meshrus/meshlib-ubuntu:${{needs.prepare-image.outputs.image_tag}}
      options: --user root
    strategy:
      matrix:
        config: [Debug, Release]
        compiler: [Сlang 11, GCC 10]
        include:
          - compiler: Сlang 11
            cxx-compiler: /usr/bin/clang++-11
            c-compiler: /usr/bin/clang-11
          - compiler: GCC 10
            cxx-compiler: /usr/bin/g++-10
            c-compiler: /usr/bin/gcc-10

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install thirdparty libs
        run: ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHRUS_BUILD_RELEASE: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Release'] }}
          MESHRUS_BUILD_DEBUG: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Debug'] }}
          CMAKE_CXX_COMPILER: ${{ matrix.cxx-compiler }}
          # not realy needed
          CMAKE_C_COMPILER: ${{ matrix.c-compiler }}

      - name: Unit Tests
        run: ./build/${{ matrix.config }}/bin/MRTest
        
      - name: Python Tests
        working-directory: ./build/${{ matrix.config }}/bin
        run: python3 ./../../../scripts/run_python_test_script.py

      - name: Archive files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ github.event_name == 'push' && matrix.compiler == 'GCC 10' && matrix.config == 'Release'}}
        run: tar -cvf Deb${{matrix.config}}Bin.tar ./build/${{matrix.config}}/bin
        
      - name: Upload Ubuntu Binaries Archive
        if: ${{ github.event_name == 'push' && matrix.compiler == 'GCC 10' && matrix.config == 'Release'}}
        uses: actions/upload-artifact@v2
        with:
          name: Deb${{matrix.config}}BinArchive
          path: Deb${{matrix.config}}Bin.tar
          retention-days: 1

  fedora-build-test:
    timeout-minutes: 40
    needs: [prepare-image]
    runs-on: ubuntu-latest
    container:
      image: meshrus/meshlib-fedora:${{needs.prepare-image.outputs.image_tag}}
      options: --user root
    strategy:
      matrix:
        config: [Debug, Release]
        compiler: [Сlang 13, GCC 11]
        include:
          - compiler: Сlang 13
            cxx-compiler: /usr/bin/clang++-13
            c-compiler: /usr/bin/clang-13
          - compiler: GCC 11
            cxx-compiler: /usr/bin/g++
            c-compiler: /usr/bin/gcc
            
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install thirdparty libs
        run: ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHRUS_BUILD_RELEASE: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Release'] }}
          MESHRUS_BUILD_DEBUG: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Debug'] }}
          CMAKE_CXX_COMPILER: ${{ matrix.cxx-compiler }}
          # not realy needed
          CMAKE_C_COMPILER: ${{ matrix.c-compiler }}

      - name: Unit Tests
        run: ./build/${{ matrix.config }}/bin/MRTest

      - name: Python Tests
        working-directory: ./build/${{ matrix.config }}/bin
        run: python3 ./../../../scripts/run_python_test_script.py

      - name: Archive files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ github.event_name == 'push' && matrix.compiler == 'GCC 11' && matrix.config == 'Release'}}
        run: tar -cvf Rpm${{matrix.config}}Bin.tar ./build/${{matrix.config}}/bin
        
      - name: Upload Fedora Binaries Archive
        if: ${{ github.event_name == 'push' && matrix.compiler == 'GCC 11' && matrix.config == 'Release'}}
        uses: actions/upload-artifact@v2
        with:
          name: Rpm${{matrix.config}}BinArchive
          path: Rpm${{matrix.config}}Bin.tar
          retention-days: 1

  macos-build-test:
    timeout-minutes: 60
    # to show the graph correctly
    needs: [prepare-image]
    runs-on: [macos-latest]
    strategy:
      matrix:
        config: [Release]
        compiler: [Сlang]
        include:
          - compiler: Сlang
            cxx-compiler: /usr/bin/clang++
            c-compiler: /usr/bin/clang

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BUILD_MACHINE_TOKEN }}
          submodules: recursive

      - name: Install thirdparty libs
        run: ./scripts/build_thirdparty.sh

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHRUS_BUILD_RELEASE: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Release'] }}
          MESHRUS_BUILD_DEBUG: ${{ fromJSON('["OFF", "ON"]')[matrix.config == 'Debug'] }}
          CMAKE_CXX_COMPILER: ${{ matrix.cxx-compiler }}
          # not realy needed
          CMAKE_C_COMPILER: ${{ matrix.c-compiler }}

      - name: Unit Tests
        run: ./build/${{ matrix.config }}/bin/MRTest

      - name: Python Tests
        working-directory: ./build/${{ matrix.config }}/bin
        run: python3 ./../../../scripts/run_python_test_script.py

  versioning-and-release-url:
    if: ${{ github.event_name == 'push' }}
    needs: [windows-build-test, ubuntu-build-test, fedora-build-test]
    uses: MeshInspector/MeshLib/.github/workflows/versioning-release.yml@master
    secrets:
      BUILD_MACHINE_TOKEN: ${{ secrets.BUILD_MACHINE_TOKEN }}

  update-win-version:
    if: ${{ github.event_name == 'push' }}
    timeout-minutes: 15
    runs-on: windows-2019
    needs: [versioning-and-release-url]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive
          
      - name: Download Windows Debug Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: WindowsArchiveDebug

      - name: Download Windows Release Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: WindowsArchiveRelease

      - name: Extract Windows Release Binaries Archive
        run: tar -xvzf MREDist_Release.zip

      - name: Extract Windows Debug Binaries Archive
        run: tar -xvzf MREDist_Debug.zip

      - name: Make Install Folder
        run: py -3.10 scripts\make_install_folder.py ${{needs.versioning-and-release-url.outputs.version_tag}}

      - name: Distribute
        run: py -3.10 scripts\zip_distribution.py MeshLibDist.zip

      - name: Upload Windows Distribution
        uses: actions/upload-artifact@v2
        with:
          name: WindowsDistribution
          path: MeshLibDist.zip
          retention-days: 1
          
  update-deb-version:
    if: ${{ github.event_name == 'push' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [versioning-and-release-url, prepare-image]
    container:
      image: meshrus/meshlib-ubuntu:${{needs.prepare-image.outputs.image_tag}}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive

      - name: Install thirdparty libs
        run: ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib

      - name: Download Ubuntu Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: DebReleaseBinArchive

      - name: Extract Ubuntu Binaries Archive
        run: tar -xvf DebReleaseBin.tar

      - name: Create Deb
        run: ./scripts/distribution.sh ${{needs.versioning-and-release-url.outputs.version_tag}}
        env:
          MESHRUS_BUILD_RELEASE: ON
          MESHRUS_BUILD_DEBUG: OFF

      - name: Upload Ubuntu Developer Distribution
        uses: actions/upload-artifact@v2
        with:
          name: UbuntuDistribution
          path: ./distr/meshlib-dev.deb
          retention-days: 1
          
  update-rpm-version:
    if: ${{ github.event_name == 'push' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [versioning-and-release-url, prepare-image]
    container:
      image: meshrus/meshlib-fedora:${{needs.prepare-image.outputs.image_tag}}
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive

      - name: Install thirdparty libs
        run: ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib

      - name: Download Fedora Binaries Archive
        uses: actions/download-artifact@v2
        with:
          name: RpmReleaseBinArchive

      - name: Extract Fedora Binaries Archive
        run: tar -xvf RpmReleaseBin.tar

      - name: Create RPM
        run: ./scripts/distribution_rpm.sh ${{needs.versioning-and-release-url.outputs.version_tag}}
        env:
          MESHRUS_BUILD_RELEASE: ON
          MESHRUS_BUILD_DEBUG: OFF

      - name: Upload Fedora Developer Distribution
        uses: actions/upload-artifact@v2
        with:
          name: FedoraDistribution
          path: meshlib-dev.rpm
          retention-days: 1

  upload-distributions:
    if: ${{ github.event_name == 'push' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [versioning-and-release-url, update-win-version, update-deb-version, update-rpm-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Download Windows Developer Distribution
        uses: actions/download-artifact@v2
        with:
          name: WindowsDistribution

      - name: Download Ubuntu Developer Distribution
        uses: actions/download-artifact@v2
        with:
          name: UbuntuDistribution

      - name: Download Fedora Developer Distribution
        uses: actions/download-artifact@v2
        with:
          name: FedoraDistribution

      - name: Rename Distributions
        run: |
          mv MeshLibDist.zip MeshLibDist_${{needs.versioning-and-release-url.outputs.version_tag}}.zip
          mv meshlib-dev.deb meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.deb
          mv meshlib-dev.rpm meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.rpm

      - name: Upload Distributions
        run: |
          echo ${{ secrets.BUILD_MACHINE_TOKEN }} | gh auth login --with-token
          gh release upload ${{needs.versioning-and-release-url.outputs.version_tag}} \
                            MeshLibDist_${{needs.versioning-and-release-url.outputs.version_tag}}.zip \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.deb \
                            meshlib_${{needs.versioning-and-release-url.outputs.version_tag}}-dev.rpm

  delete-artifacts:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [upload-distributions]
    if: always()
    steps:
        # all Windows
      - name: Delete Windows Debug Install Archive artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: WindowsArchiveDebug
          failOnError: false

      - name: Delete Windows Release Install Archive artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: WindowsArchiveRelease
          failOnError: false

      - name: Delete Windows Developer Distribution
        uses: geekyeggo/delete-artifact@v1
        with:
          name: WindowsDistribution
          failOnError: false
          
        # all Ubuntu
      - name: Delete Ubuntu Binaries artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: DebReleaseBinArchive
          failOnError: false

      - name: Delete Ubuntu Developer Distribution
        uses: geekyeggo/delete-artifact@v1
        with:
          name: UbuntuDistribution
          failOnError: false

        # all RPM
      - name: Delete Fedora Binaries artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: RpmReleaseBinArchive
          failOnError: false

      - name: Delete Fedora Developer Distribution
        uses: geekyeggo/delete-artifact@v1
        with:
          name: FedoraDistribution
          failOnError: false
