name: Test Distribution

on:
  workflow_call:
    inputs:
      release_id:
        required: true
        type: string

jobs:
  linux-test:
    timeout-minutes: 30
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ 'x86-64', 'arm64']
        os: ["ubuntu:20.04", "ubuntu:22.04", "fedora:39"]
        include:
          - platform: 'x86-64'
            runner: ubuntu-latest
          - platform: 'arm64'
            runner: [ self-hosted, linux-arm64 ]
          - os: "ubuntu:20.04"
            name: "ubuntu20"
            cxx-compiler: /usr/bin/clang++-11
          - os: "ubuntu:22.04"
            name: "ubuntu22"
            cxx-compiler: /usr/bin/clang++-14
          - os: "fedora:39"
            name: "fedora39"
            cxx-compiler: /usr/bin/clang++-17
        exclude:
          - os: "fedora:39"
            platform: 'arm64'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Download Ubuntu x86-64 Release
        if: ${{ matrix.os != 'fedora:39' && matrix.platform == 'x86-64' }}
        uses: robinraju/release-downloader@v1.10
        with:
          releaseId: ${{inputs.release_id}}
          fileName: "*${{matrix.name}}-dev.deb"

      - name: Install Ubuntu x86-64 Release
        if: ${{ matrix.os != 'fedora:39' && matrix.platform == 'x86-64' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive && apt-get -y update && apt-get -y upgrade && \
            apt-get -y install sudo xvfb curl libssl-dev python3-distutils python3-pip && \
            apt-get -y install ./*${{matrix.name}}-dev.deb
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade -r ./requirements/python.txt

      - name: Download Ubuntu arm64 Release
        if: ${{ matrix.os != 'fedora:39' && matrix.platform == 'arm64' }}
        uses: robinraju/release-downloader@v1.10
        with:
          releaseId: ${{inputs.release_id}}
          fileName: "*${{matrix.name}}-arm64-dev.deb"

      - name: Install Ubuntu arm64 Release
        if: ${{ matrix.os != 'fedora:39' && matrix.platform == 'arm64' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive && apt-get -y update && apt-get -y upgrade && \
            apt-get -y install sudo xvfb curl libssl-dev python3-distutils python3-pip && \
            apt-get -y install ./*${{matrix.name}}-arm64-dev.deb
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade -r ./requirements/python.txt

      - name: Download Fedora Release
        if: ${{ matrix.os == 'fedora:39' }}
        uses: robinraju/release-downloader@v1.10
        with:
          releaseId: ${{inputs.release_id}}
          fileName: "*.rpm"

      - name: Install Fedora Release
        if: ${{ matrix.os == 'fedora:39' }}
        run: |
          dnf --refresh -y upgrade
          dnf -y --setopt=install_weak_deps=False install xorg-x11-server-Xvfb mesa-dri-drivers mesa-libGL-devel libXi-devel util-linux python3 python3-pip
          dnf -y --setopt=install_weak_deps=False install ./*.rpm
          python3 -m pip install --upgrade -r ./requirements/python.txt

      - name: Install supported compiler
        if: ${{ matrix.os == 'ubuntu:20.04' }}
        run: |
          apt-get -y install clang-11

      - name: Install supported compiler
        if: ${{ matrix.os == 'ubuntu:22.04' }}
        run: |
          apt-get -y install clang-14

      - name: Run MeshViewer
        if: always()
        run: xvfb-run -a MeshViewer -hidden -noEventLoop

      - name: Show meshconv help
        if: always()
        run: meshconv --help

      - name: Build example
        if: always()
        working-directory: examples/cmake-example
        run: |
          mkdir build && \
          cd build && \
          cmake .. -DCMAKE_CXX_COMPILER=${{matrix.cxx-compiler}} && \
          cmake --build . && \
          ./cmake-example

      - name: Ubuntu python test
        if: ${{ always() && matrix.os != 'fedora:39' }}
        working-directory: test_python
        run: python3 -m pytest -s -v

      - name: Fedora python test
        if: ${{ always() && matrix.os == 'fedora:39' }}
        working-directory: test_python
        run: python3 -m pytest -s -v


  macos-test:
    runs-on: macos-12
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Download Distributive
        uses: robinraju/release-downloader@v1.10
        with:
          releaseId: ${{inputs.release_id}}
          fileName: "*x64.pkg"

      - name: Install Pkg
        run: |
          sudo installer -pkg meshlib_*x64.pkg  -target /
          xargs brew install < /Library/Frameworks/MeshLib.framework/Versions/Current/requirements/macos.txt

      # [error] NSGL: Failed to find a suitable pixel format
      #- name: Run MeshViewer
        #if: always()
        #run: /Library/Frameworks/MeshLib.framework/Versions/Current/bin/MeshViewer -tryHidden -noEventLoop

      - name: Show meshconv help
        if: always()
        run: /Library/Frameworks/MeshLib.framework/Versions/Current/bin/meshconv --help

      - name: Build example
        if: always()
        working-directory: examples/cmake-example
        run: |
          mkdir build && \
          cd build && \
          cmake .. -DCMAKE_CXX_COMPILER=/usr/bin/clang++ && \
          cmake --build . && \
          ./cmake-example
