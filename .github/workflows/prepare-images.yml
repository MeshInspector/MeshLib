name: Prepare images

on:
  workflow_call:
    inputs:
      docker_image_tag:
        required: true
        type: string
      need_linux_image_rebuild:
        required: true
        type: boolean
      need_linux_vcpkg_rebuild:
        required: true
        type: boolean
      need_windows_vcpkg_rebuild:
        required: true
        type: boolean
      vs19_vcpkg_version:
        required: true
        type: string
      vs22_vcpkg_version:
        required: true
        type: string

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  always-success:
    runs-on: aws-micro
    steps:
      - name: Do nothing
        run: echo

  linux-image-build-upload:
    if: ${{ inputs.need_linux_image_rebuild }}
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        distro: [ ubuntu20, ubuntu22, ubuntu24, emscripten ]
        arch: [ x64, arm64 ]
        exclude:
          - distro: emscripten
            arch: x64
        include:
          - arch: x64
            image-suffix: ''
            os: ubuntu-latest
          - arch: arm64
            image-suffix: '-arm64'
            os: [ self-hosted, linux-arm64, on-demand, meshinspector ]
    runs-on: ${{ matrix.os }}
    env:
      dockerfile: ${{ matrix.distro }}Dockerfile
      image: meshlib/meshlib-${{ matrix.distro }}${{ matrix.image-suffix }}:${{ inputs.docker_image_tag }}
    steps:
      - name: Work-around possible permission issues
        shell: bash
        run: |
          # NOTE: {GITHUB_WORKSPACE} != {{ github.workspace }}
          # Related issue: https://github.com/actions/runner/issues/2058
          if test -d $GITHUB_WORKSPACE && test -n "$(find ${GITHUB_WORKSPACE} -user root)" ; then
            mv ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}_${RANDOM}
            mkdir ${GITHUB_WORKSPACE}
          fi

      - name: Remove unused Docker data
        run: docker system prune --force --all --volumes

      - name: Work-around possible permission issues
        shell: bash
        run: |
          # NOTE: {GITHUB_WORKSPACE} != {{ github.workspace }}
          # Related issue: https://github.com/actions/runner/issues/2058
          if test -d $GITHUB_WORKSPACE && test -n "$(find ${GITHUB_WORKSPACE} -user root)" ; then
            mv ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}_${RANDOM}
            mkdir ${GITHUB_WORKSPACE}
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          username: meshlib
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Linux image
        run: docker build -f ./docker/${{ env.dockerfile }} -t ${{ env.image }} . --progress=plain

      - name: Push Linux image
        run: docker push ${{ env.image }}

      - name: Remove unused Docker data
        run: docker system prune --force --all --volumes

  linux-vcpkg-build-upload:
    if: ${{ inputs.need_linux_vcpkg_rebuild }}
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        arch: [ x64 ]
        include:
          - arch: x64
            image-suffix: ''
            os: ubuntu-latest
          - arch: arm64
            image-suffix: '-arm64'
            os: [ self-hosted, linux-arm64, on-demand, meshinspector ]
    runs-on: ${{ matrix.os }}
    env:
      image: meshlib/meshlib-vcpkg${{ matrix.image-suffix }}:${{ inputs.docker_image_tag }}
      vcpkg_triplet: ${{ matrix.arch }}-linux-meshlib
    steps:
      - name: Remove unused Docker data
        run: docker system prune --force --all --volumes

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          username: meshlib
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Linux vcpkg image
        run: docker build -f ./docker/vcpkgDockerfile -t ${{ env.image }} --build-arg VCPKG_TRIPLET=${{ env.vcpkg_triplet }} . --progress=plain

      - name: Push Linux vcpkg image
        run: docker push ${{ env.image }}

      - name: Remove unused Docker data
        run: docker system prune --force --all --volumes

  windows-vcpkg-build-upload:
    if: ${{ inputs.need_windows_vcpkg_rebuild }}
    timeout-minutes: 240
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ windows-2022 ]
        include:
          - runner: windows-2022
            vcpkg-version: ${{ inputs.vs22_vcpkg_version }}
    steps:
      - name: Setup vcpkg
        working-directory: C:\vcpkg
        run: |
          git fetch
          git checkout ${{ matrix.vcpkg-version }}
          bootstrap-vcpkg.bat
          vcpkg.exe integrate install

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build and cache vcpkg
        run: .\thirdparty\install.bat --write-s3
