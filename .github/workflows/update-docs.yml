name: Update MeshLib Documentation site

on:
  release:
    types: [ published ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  workflow_call:
    inputs:
      output_folder:
        required: false
        type: string
        default: "MeshLib"


jobs:
  setup:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get-latest-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

  create-python-stubs:
    needs: setup
    timeout-minutes: 80
    runs-on: ubuntu-latest
    container:
      image: "meshlib/meshlib-ubuntu20:latest"
      options: "--user root"
    strategy:
      fail-fast: false
    steps:
      - name: Work-around possible permission issues
        shell: bash
        run: |
          # NOTE: {GITHUB_WORKSPACE} != {{ github.workspace }}
          # Related issue: https://github.com/actions/runner/issues/2058
          if test -d $GITHUB_WORKSPACE && test -n "$(find ${GITHUB_WORKSPACE} -user root)" ; then
            mv ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}_${RANDOM}
            mkdir ${GITHUB_WORKSPACE}
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.setup.outputs.version_tag}}

      - name: Checkout third-party submodules
        # Some of those safe.directory rules could be redudant.
        run: |
          # have to checkout selective submodules by our own
          # related issue: https://github.com/actions/checkout/issues/1779
          export HOME=${RUNNER_TEMP}
          echo ${GITHUB_WORKSPACE}
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          git config --global --add safe.directory ${GITHUB_WORKSPACE}/thirdparty/imgui
          git config --global --add safe.directory ${GITHUB_WORKSPACE}/thirdparty/parallel-hashmap
          git submodule update --init --depth 1 thirdparty/imgui thirdparty/parallel-hashmap

      - name: Python setup
        run: |
          apt -y update && apt -y upgrade && apt -y install software-properties-common
          add-apt-repository -y ppa:deadsnakes/ppa && apt -y install python3.10-dev python3.10-distutils

      - name: Pip setup
        run: |
          curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10
          python3.10 -m pip install --upgrade -r ./requirements/python.txt
          python3.10 -m pip install pytest

      - name: Install thirdparty libs
        # Also print the amount of RAM. If there's not enough RAM, building MRBind bindings can fail. Not doing it in that step, because OOM fails can erase logs from the current step.
        run: |
          ln -s /usr/local/lib/meshlib-thirdparty-lib/lib ./lib
          ln -s /usr/local/lib/meshlib-thirdparty-lib/include ./include
          ./scripts/mrbind/install_mrbind_ubuntu.sh
          free -h

      - name: Build
        run: ./scripts/build_source.sh
        env:
          MESHLIB_PYTHON_VERSION: "3.10"
          MESHLIB_BUILD_RELEASE: "ON"
          MESHLIB_BUILD_DEBUG: "OFF"
          # When using Clang 11 on Ubuntu Arm 20.04, we get some obscure ABI issues that fail some tests,
          # see the comments in `test_regression/test_algorithms/test_decimate.py` for more details.
          CMAKE_CXX_COMPILER: /usr/bin/clang++-11
          # FIXME: OpenGL libraries are included to wheel packages when the XDE module is used
          # Disabling CUDA at least because Clang 18 is too new for it on Ubuntu 20.04, and we're using Clang 18 for reasons
          # explained in `MeshLib/scripts/mrbind/0001-Disable-tests-that-seem-to-expose-an-ABI-incompatibility.patch`.
          MR_CMAKE_OPTIONS: >
            -DMRIOEXTRAS_OPENCASCADE_USE_XDE=OFF
            -DMRVIEWER_NO_GTK=ON
            -DMESHLIB_BUILD_MRCUDA=OFF

      - name: Generate and build MRBind bindings
        run: |
          make -f scripts/mrbind/generate.mk -B --trace FOR_WHEEL=1 PYTHON_PKGCONF_NAME=python-3.10-embed CXX_FOR_ABI=/usr/bin/clang++-11

      - name: Create and fix Wheel
        run: |
          python3.10 ./scripts/wheel/build_wheel.py --version ${{needs.setup.outputs.version_tag}}

      - name: Upload to Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PythonWhl
          path: ./scripts/wheel/meshlib/wheelhouse/meshlib-*.whl
          retention-days: 1

  update-documentation:
    needs: create-python-stubs
    runs-on: ubuntu-latest
    steps:
      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1
        with:
          version: "1.11.0"

      - name: Checkout MeshLib
        uses: actions/checkout@v4
        with:
          path: 'MeshLib/'

      - name: Checkout Doxygen Data
        uses: actions/checkout@v4
        with:
          repository: 'MeshInspector/MeshInspector.github.io'
          path: 'MeshInspector.github.io/'
          token: ${{ secrets.MESHINSPECTOR_BOT_TOKEN }}
          submodules: recursive

      - name: Download Whl Package
        uses: actions/download-artifact@v4
        with:
          name: PythonWhl
          path: MeshLib.whl

      - name: Install Unzip
        run: sudo apt-get install unzip

      - name: Unzip Whl Package
        run: |
          echo "---------------------"
          pwd
          ls -la
          echo "====================="
          ls -la ~/
          echo "+++++++++++++++++++++"
          unzip MeshLib.whl -d MeshLibWhl

      - name: Build All Documentation
        working-directory: MeshInspector.github.io
        run: |
          bash scripts/pre.sh ${{ inputs.output_folder }}
          doxygen DoxyfilePy
          doxygen DoxyfileCpp
          doxygen DoxyfileMain
          bash scripts/post.sh ${{ inputs.output_folder }}

      - name: Commit and push changes
        working-directory: MeshInspector.github.io
        run: |
          git config user.email "${{ secrets.MESHINSPECTOR_BOT_EMAIL }}@gmail.com"
          git config user.name "meshinspector-bot"
          git add -A
          git commit --allow-empty -m "Auto update docs" -a
          git push

      # Pyhton Whl
      - name: Delete Whl Package
        uses: geekyeggo/delete-artifact@v5
        with:
          name: PythonWhl
          failOnError: false
