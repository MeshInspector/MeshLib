name: Build and test Windows

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      UPLOAD_ARTIFACTS:
        required: true
        type: boolean

env:
  VCPKG-VERSION: '2022.11.14'
  CUDA-VERSION: '11.4.2.47141'
  CUDA-MAJOR: '11'
  CUDA-MINOR: '4'

jobs:
  windows-build-test:
    timeout-minutes: 50
    runs-on: windows-2019
    strategy:
      matrix:
        config: [Debug, Release]
    steps:
      - name: Restore Vcpkg Cache
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          key: vcpkg-${{env.VCPKG-VERSION}}
          path: |
            C:\vcpkg\build\*
            C:\vcpkg\installed\*
            C:\vcpkg\scripts\*

      - name: Configure AWS Credentials
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        working-directory: C:\vcpkg
        run: |
          aws codeartifact login --tool dotnet --repository meshlib-vcpkg --domain meshlib --domain-owner 259351611210 --region us-east-1
          nuget install vcpkg-export-20230329-153927 -Source "meshlib/meshlib-vcpkg"
          Xcopy C:\vcpkg\vcpkg-export-20230329-153927.1.0.0 C:\vcpkg /E/H/C/I/y

      - name: Vcpkg integrate install
        working-directory: C:\vcpkg
        run: C:\vcpkg\vcpkg.exe integrate install

      - name: Restore CUDA Cache
        uses: actions/cache@v3
        id: cuda-cache
        with:
          key: cuda-${{env.CUDA-VERSION}}
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA*

      - name: Install CUDA
        if: steps.cuda-cache.outputs.cache-hit != 'true'
        run: choco install cuda --version=${{env.CUDA-VERSION}} --confirm

      - name: Setup CUDA
        shell: bash
        run: |
          echo "CUDA_PATH=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ env.CUDA-MAJOR }}.${{ env.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "CUDA_PATH_V${{ env.CUDA-MAJOR }}_${{ env.CUDA-MINOR }}=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ env.CUDA-MAJOR }}.${{ env.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "CUDA_PATH_VX_Y=CUDA_PATH_V${{ env.CUDA-MAJOR }}_${{ env.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ env.CUDA-MAJOR }}.${{ env.CUDA-MINOR }}\\bin" >> $GITHUB_PATH
          cp -R "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ env.CUDA-MAJOR }}.${{ env.CUDA-MINOR }}\\extras\\visual_studio_integration\\MSBuildExtensions\\." "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\BuildCustomizations"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Update thirdparty
        run: vcpkg install --recurse --binarysource=clear --overlay-triplets thirdparty\vcpkg\triplets  hidapi:x64-windows-meshlib

      - name: Setup python
        run: |
          py -3.10 -m ensurepip --upgrade
          py -3.10 -m pip install --upgrade pip
          py -3.10 -m pip install -r .\requirements\python.txt

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3

      - name: Build
        run: msbuild -m source\MeshLib.sln -p:Configuration=${{ matrix.config }}

      - name: Run Test
        working-directory: source\x64\${{ matrix.config }}
        run: .\MeshViewer.exe -tryHidden -noEventLoop

      - name: Unit Tests
        run: py -3 scripts\run_unit_test_script.py ${{ matrix.config }}

      - name: Python Tests
        working-directory: source\x64\${{ matrix.config }}
        run: py -3 ..\..\..\scripts\run_python_test_script.py

      - name: Archive files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ inputs.UPLOAD_ARTIFACTS }}
        run: tar -a -c -f MREDist_${{ matrix.config }}.zip ./source/x64/${{matrix.config}}

      - name: Upload Windows Binaries Archive
        if: ${{ inputs.UPLOAD_ARTIFACTS }}
        uses: actions/upload-artifact@v3
        with:
          name: WindowsArchive
          path: MREDist_${{ matrix.config }}.zip
          retention-days: 1
