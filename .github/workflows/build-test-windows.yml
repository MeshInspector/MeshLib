name: Build and test Windows

on:
  workflow_call:
    inputs:
      full_config_build:
        default: false
        required: false
        type: boolean
      autotest_data_s3_url:
        default: "s3://data-autotest/test_data_2024-nov-07"
        required: false
        type: string
      UPLOAD_ARTIFACTS:
        required: true
        type: boolean
      mrbind:
        default: true
        required: false
        type: boolean

env:
  VCPKG-VERSION: '2024.10.21'

jobs:
  windows-build-test:
    timeout-minutes: 70
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        config: [ "Debug", "Release" ]
        runner: [ windows-2022, windows-2019 ]
        full_config_build:
          - ${{fromJSON(inputs.full_config_build)}}
        exclude:
          - full_config_build: false
            runner: windows-2022
            config: "Debug"
        include:
          - runner: windows-2022
            vc-path: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
            CUDA-VERSION: '12.0.1.52833'
            CUDA-MAJOR: '12'
            CUDA-MINOR: '0'
          - runner: windows-2019
            vc-path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise'
            CUDA-VERSION: '11.4.2.47141'
            CUDA-MAJOR: '11'
            CUDA-MINOR: '4'
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    env:
      UPLOAD_TEST_ARTIFACTS: ${{ contains(github.event.pull_request.labels.*.name, 'upload-test-artifacts') }}
      INTERNAL_BUILD: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Checkout Vcpkg ${{env.VCPKG-VERSION}}
        working-directory: C:\vcpkg
        run: |
          git fetch
          git checkout ${{env.VCPKG-VERSION}}

      - name: Restore Vcpkg Cache
        uses: actions/cache@v4
        id: vcpkg-cache
        with:
          key: vcpkg-cache-${{env.VCPKG-VERSION}}
          path: |
            C:\vcpkg\*

      - name: Configure AWS Credentials
        if: ${{ env.INTERNAL_BUILD == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::259351611210:role/GitHubMeshLibAwsCredsRole
          aws-region: us-east-1

      - name: Update vcpkg packages
        run: |
          .\thirdparty\install.bat --write-s3

      - name: Vcpkg integrate install
        working-directory: C:\vcpkg
        run: C:\vcpkg\vcpkg.exe integrate install

      - name: Restore CUDA Cache
        uses: actions/cache@v4
        id: cuda-cache
        with:
          key: cuda-${{matrix.CUDA-VERSION}}
          path: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA*

      - name: Install CUDA
        if: steps.cuda-cache.outputs.cache-hit != 'true'
        run: choco install cuda --version=${{matrix.CUDA-VERSION}} --confirm

      - name: Setup CUDA
        shell: bash
        run: |
          echo "CUDA_PATH=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ matrix.CUDA-MAJOR }}.${{ matrix.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "CUDA_PATH_V${{ matrix.CUDA-MAJOR }}_${{ matrix.CUDA-MINOR }}=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ matrix.CUDA-MAJOR }}.${{ matrix.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "CUDA_PATH_VX_Y=CUDA_PATH_V${{ matrix.CUDA-MAJOR }}_${{ matrix.CUDA-MINOR }}" >> $GITHUB_ENV
          echo "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v${{ matrix.CUDA-MAJOR }}.${{ matrix.CUDA-MINOR }}\\bin" >> $GITHUB_PATH

      - name: Install Visual Studio Integration
        run: |
          $x = (dir $env:CUDA_PATH -dir -recurse -depth 2).where({$_.name -eq 'visual_studio_integration'}).fullname
          $y = (dir $x -dir -recurse).where({$_.name -eq 'MSBuildExtensions'}).fullname + '\*'
          (gi '${{matrix.vc-path}}\MSBuild\Microsoft\VC\*\BuildCustomizations').fullname.foreach({cp $y $_})

      - name: Setup python
        run: |
          py -3.11 -m ensurepip --upgrade
          py -3.11 -m pip install --upgrade pip
          py -3.11 -m pip install -r .\requirements\python.txt

      - name: Check Visual Studio projects for missing file entries
        run: py -3 scripts\check_vcxproj.py source\

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Install .NET
        if:   matrix.runner == 'windows-2022'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        if:   matrix.runner == 'windows-2022'
        uses: codebeltnet/dotnet-restore@v2
        with:
          projects: 'source/**/*.csproj'

        # Install MSYS2 using their github action instead of ours `install_deps_windows_msys2.bat`. Locally users should use that bat file.
        # I'm expecting the official action to be better suited for CI needs (e.g. they promise some form of caching in the readme), but I didn't perform a proper comparison.
      - name: Install MSYS2 for MRBind
        uses: msys2/setup-msys2@v2
        if: ${{inputs.mrbind}}
        with:
          msystem: clang64
          install: make gawk procps-ng
          location: C:\msys64_meshlib_mrbind

      - name: Install Clang in MSYS2
        if: ${{inputs.mrbind}}
        shell: msys2 {0}
        run: |
          ./scripts/mrbind/msys2_install_clang_ver.sh $(cat scripts/mrbind/clang_version_msys2.txt)
          # Install additional packages. Must do it here, since the script above would uninstall them.
          pacman -S --needed --noconfirm $MINGW_PACKAGE_PREFIX-cmake

      - name: Build
        run: msbuild -m source\MeshLib.sln -p:Configuration=${{ matrix.config }}

      - name: Build .NET
        if:   matrix.runner == 'windows-2022'
        run: msbuild -m source\MeshLibDotNet.sln -p:Configuration=${{ matrix.config }}

      - name: Build MRBind
        if: ${{inputs.mrbind}}
        shell: cmd
        env:
          # Need this env variable because our .bat files assume msys2 installed directly to `C:\msys64_meshlib_mrbind`,
          #   and the setup-msys2 action always adds the `...\msys64` component at the end, and it's a tiny bit wasteful to move it around when running in the CI.
          MSYS2_DIR: C:\msys64_meshlib_mrbind\msys64
        run: call ./scripts/mrbind/install_mrbind_windows_msys2.bat

      - name: Generate and build MRBind bindings
        if: ${{inputs.mrbind}}
        shell: cmd
        env:
          MSYS2_DIR: C:\msys64_meshlib_mrbind\msys64
        # Note that `\` doesn't work here as a line continuation, and will lead to weird errors.
        run: |
          call "${{matrix.vc-path}}\Common7\Tools\VsDevCmd.bat" -arch=amd64
          call ./scripts/mrbind/generate_win.bat -B --trace MODE=none VS_MODE=${{matrix.config}}

      - name: Run Start-and-Exit Tests
        working-directory: source\x64\${{ matrix.config }}
        run: .\MeshViewer.exe -tryHidden -noEventLoop -unloadPluginsAtEnd
        shell: cmd

      - name: Unit Tests
        run: py -3 scripts\run_unit_test_script.py ${{ matrix.config }}

      - name: C Unit Tests
        run: py -3 scripts\run_c_unit_test_script.py ${{ matrix.config }}

      - name: C# Unit Tests
        if:   matrix.runner == 'windows-2022'
        run: py -3 scripts\run_c_sharp_unit_test_script.py ${{ matrix.config }}

      - name: Python Sanity Tests
        working-directory: source\x64\${{ matrix.config }}
        run: py -3 ..\..\..\scripts\run_python_test_script.py -d '..\test_python'

      # cache managment: https://github.com/MeshInspector/MeshLib/actions/caches
      - name: Cache autotest data from S3 Tests
        if: ${{ env.INTERNAL_BUILD == 'true' }}
        id: cache-autotest
        uses: actions/cache@v4
        with:
          path: test_data
          key: ${{inputs.autotest_data_s3_url}}

      - name: Copy autotest data from S3 Tests
        if: ${{ env.INTERNAL_BUILD == 'true' }}
        run: aws s3 sync ${{inputs.autotest_data_s3_url}} .\test_data --delete --no-sign-request --size-only

      - name: Python Regression Tests
        env:
          SMOKE: ${{ env.INTERNAL_BUILD == 'true' && inputs.full_config_build == false && matrix.config == 'Debug' }}
          BINDS_V: ${{ fromJSON('[2,3]')[inputs.mrbind || 0] }}
        if: ${{ env.INTERNAL_BUILD == 'true' }}
        working-directory: source\x64\${{ matrix.config }}
        run: py -3 ..\..\..\scripts\run_python_test_script.py -d '..\test_regression' -s ${{env.SMOKE}} -bv ${{env.BINDS_V}}

      - name: Copy test artifacts to S3
        if: ${{ env.UPLOAD_TEST_ARTIFACTS == 'true' && env.INTERNAL_BUILD == 'true' && !cancelled() }}
        run: aws s3 cp ./pytest_temp 's3://test-artifacts-git/tests/${{github.run_id}}/windows//${{matrix.runner}}/${{matrix.config}}' --recursive

      - name: Archive files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.runner == 'windows-2019' }}
        run: tar -a -c -f MREDist_${{ matrix.config }}.zip ./source/x64/${{matrix.config}}

      - name: Archive .NET files # https://github.com/actions/download-artifact#maintaining-file-permissions-and-case-sensitive-files
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.runner == 'windows-2022' && matrix.config == 'Release' }}
        run: tar -a -c -f MREDist_DotNet.zip ./source/x64/Release

      - name: Upload Windows Binaries Archive
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.runner == 'windows-2019' }}
        uses: actions/upload-artifact@v4
        with:
          name: WindowsArchive_${{matrix.config}}
          path: MREDist_${{matrix.config}}.zip
          retention-days: 1

      - name: Upload .NET Binaries Archive
        if: ${{ inputs.UPLOAD_ARTIFACTS && matrix.runner == 'windows-2022' && matrix.config == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: DotNetArchive
          path: MREDist_DotNet.zip
          retention-days: 1
