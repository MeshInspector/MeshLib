FROM fedora:39 AS build

RUN dnf -y update && \
    dnf -y install git ninja-build && \
    dnf clean all

RUN mkdir /home/MeshLib
WORKDIR "/home/MeshLib"

#copy files
COPY .git .git
COPY thirdparty thirdparty
COPY scripts scripts
COPY source source
COPY requirements requirements

ENV MR_STATE=DOCKER_BUILD

# build and install thirdparty
RUN ./scripts/build_thirdparty.sh


FROM fedora:39 AS production

RUN mkdir /usr/local/lib/meshlib-thirdparty-lib/
WORKDIR "/usr/local/lib/meshlib-thirdparty-lib/"

COPY scripts/install_dnf_requirements.sh scripts/install_dnf_requirements.sh
COPY scripts/install_thirdparty.sh scripts/install_thirdparty.sh
COPY scripts/patches scripts/patches
COPY requirements requirements

COPY --from=build /home/MeshLib/lib /usr/local/lib/meshlib-thirdparty-lib/lib
COPY --from=build /home/MeshLib/include /usr/local/lib/meshlib-thirdparty-lib/include

ENV MR_STATE=DOCKER_BUILD

RUN dnf -y update && \
    dnf -y install git time python3-pip rpm-build xorg-x11-server-Xvfb mesa-dri-drivers mesa-libGL-devel libXi-devel ninja-build && \
    ./scripts/install_dnf_requirements.sh && \
    dnf -y install 'dnf-command(config-manager)' && \
    dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo && \
    dnf -y install gh && \
    dnf clean all

RUN ./scripts/install_thirdparty.sh && \
    echo '/usr/local/lib' | tee -a  /etc/ld.so.conf && \
    sudo ldconfig

# install aws cli
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update


RUN sudo dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/fedora39/x86_64/cuda-fedora39.repo \
  && sudo dnf clean all \
  && sudo dnf -y install cuda

# Set environment variables for CUDA
ENV CUDA_HOME=/usr/local/cuda-12.1
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH

# Build newer Clang from source
ENV CLANG_VER=18.1.8
RUN git clone https://github.com/llvm/llvm-project --depth 1 -b llvmorg-$CLANG_VER source-clang
RUN mkdir -p /usr/local/opt/custom-clang
RUN cmake -S source-clang/llvm -B build-clang -GNinja -Wno-dev \
    -DCMAKE_INSTALL_PREFIX=/usr/local/opt/custom-clang \
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_PARALLEL_LINK_JOBS=2 \
    -DLLVM_ENABLE_PROJECTS='clang;compiler-rt' \
    -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
    -DCLANG_LINK_CLANG_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_DEFAULT_TARGET_TRIPLE=x86_64-redhat-linux-gnu \
    -DCLANG_DEFAULT_CXX_STDLIB=libstdc++
RUN cmake --build build-clang -j`nproc`
RUN cmake --install build-clang
RUN rm -rf source-clang build-clang
ENV PATH=/usr/local/opt/custom-clang/bin:$PATH
