ARG VCPKG_VERSION=2025.04.09
ARG VCPKG_TRIPLET=x64-linux-meshlib


FROM rockylinux:8 AS build

RUN echo "install_weak_deps=false" >> /etc/dnf/dnf.conf && \
    dnf -y install --enablerepo powertools \
        git cmake gcc-toolset-11 ninja-build clang-devel \
        $(: vcpkg requirements ) \
        curl zip unzip tar \
        $(: vcpkg package requirements ) \
        autoconf-archive bison dbus-libs libtool libudev-devel libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel libXtst-devel mesa-libGL-devel perl-core python3.12-pip \
        && \
    dnf clean all

WORKDIR /root

# install vcpkg Python dependencies
RUN python3.12 -m venv venv && \
    source venv/bin/activate && \
    pip install jinja2

ARG VCPKG_VERSION
ENV VCPKG_VERSION=$VCPKG_VERSION
RUN git clone https://github.com/microsoft/vcpkg.git --branch $VCPKG_VERSION --single-branch && \
    cd vcpkg && \
    ./bootstrap-vcpkg.sh -disableMetrics

WORKDIR /root/vcpkg

# build vcpkg packages
COPY requirements/vcpkg-linux.txt MeshLib/requirements.txt
COPY thirdparty/vcpkg/ports MeshLib/ports
COPY thirdparty/vcpkg/triplets MeshLib/triplets

ARG VCPKG_TRIPLET
ENV VCPKG_TRIPLET=$VCPKG_TRIPLET
RUN source /opt/rh/gcc-toolset-11/enable && \
    source /root/venv/bin/activate && \
    ./vcpkg install --host-triplet=${VCPKG_TRIPLET} --overlay-triplets=MeshLib/triplets --overlay-ports=MeshLib/ports $(cat MeshLib/requirements.txt | tr '\n' ' ')
RUN ./vcpkg export --host-triplet=${VCPKG_TRIPLET} --overlay-triplets=MeshLib/triplets --x-all-installed --raw --output=vcpkg --output-dir=/opt


FROM nvidia/cuda:12.6.0-devel-rockylinux8 AS production

COPY --from=build /opt/vcpkg /opt/vcpkg

ENV MR_STATE=DOCKER_BUILD
ENV MESHLIB_USE_VCPKG=ON
ENV VCPKG_ROOT=/opt/vcpkg

ARG VCPKG_TRIPLET
ENV VCPKG_TRIPLET=$VCPKG_TRIPLET

RUN echo "install_weak_deps=false" >> /etc/dnf/dnf.conf && \
    dnf -y install --enablerepo powertools \
        git cmake gcc-toolset-11 ninja-build clang-devel \
        $(: vcpkg requirements ) \
        curl zip unzip tar \
        $(: vcpkg package requirements ) \
        autoconf-archive bison dbus-libs libtool libudev-devel libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel libXtst-devel mesa-libGL-devel perl-core \
        $(: mrbind requirements ) \
        lld llvm-devel python3.12-devel which zlib-devel \
        $(: CI environment ) \
        time python3.12-pip rpm-build xorg-x11-server-Xvfb mesa-dri-drivers \
        && \
    dnf clean all

# install github-cli
RUN dnf -y install 'dnf-command(config-manager)' && \
    dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo && \
    dnf -y install gh && \
    dnf clean all

# install aws cli
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update && \
    rm -rf awscliv2.zip aws/
