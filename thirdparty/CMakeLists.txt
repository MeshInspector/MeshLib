cmake_minimum_required(VERSION 3.16 FATAL_ERROR)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project (MeshRUs_thirdparty CXX)

# all binaries will be located in ./build/Release/bin
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-sign-compare -Wno-unknown-pragmas -Wno-unused-variable \
       -Wno-unused-function -Wno-unused-variable -Wno-comment -Wno-parentheses -Wno-int-in-bool-context -Wno-strict-aliasing \
       -Wno-macro-redefined -Wno-return-type -Wno-unused-variable -Wno-deprecated-declarations")

IF(MR_EMSCRIPTEN AND NOT MR_EMSCRIPTEN_SINGLETHREAD)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread")
ENDIF()

#imgui build
file(GLOB IMGUI_SOURCES "./imgui/*.cpp" "./../source/imgui/*.cpp" "./imgui/misc/freetype/*.cpp")
file(GLOB IMGUI_HEADERS "./imgui/*.h" "./../source/imgui/*.h" "./imgui/misc/freetype/*.h")
include_directories("../source/imgui/")
include_directories("../thirdparty/imgui/")
add_compile_definitions(IMGUI_USER_CONFIG=\"MRCustomImGuiConfig.h\")
add_compile_definitions(IMGUI_ENABLE_FREETYPE)
add_library(imgui SHARED ${IMGUI_SOURCES} ${IMGUI_HEADERS})
IF ( MR_EMSCRIPTEN )
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s USE_FREETYPE=1")
ELSE()
  find_package(Freetype REQUIRED)
  include_directories(${FREETYPE_INCLUDE_DIRS})
  IF(APPLE)
    target_link_libraries(imgui PRIVATE ${FREETYPE_LIBRARIES})
  ELSE()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-but-set-variable")
  ENDIF()
ENDIF()

IF(APPLE OR MR_EMSCRIPTEN)
ELSE()
 # set platform dependent flags
 file(STRINGS /etc/os-release distro REGEX "^NAME=")
 string(REGEX REPLACE "NAME=\"(.*)\"" "\\1" distro "${distro}")
 file(STRINGS /etc/os-release version_id REGEX "^VERSION_ID=")
 string(REGEX REPLACE "VERSION_ID=\"(.*)\"" "\\1" version_id "${version_id}")
 string(FIND ${version_id} "." dot-pos)
 string(SUBSTRING ${version_id} 0 ${dot-pos} version_id)

 IF( NOT ${distro} STREQUAL "Fedora Linux" )
  set(OPENVDB_ENABLE_UNINSTALL OFF)
  set(OPENVDB_ENABLE_INSTALL OFF)
  set(OPENVDB_CORE_SHARED "ON")
  set(OPENVDB_CORE_STATIC "OFF")
  add_subdirectory(./openvdb ./openvdb)
 ENDIF()

 set(CPR_ENABLE_UNINSTALL "OFF")
 set(CPR_ENABLE_INSTALL "OFF")
 set(CPR_USE_SYSTEM_GTEST "ON")
 set(CPR_BUILD_TESTS "OFF")
 set(CPR_BUILD_TESTS_SSL "OFF")
 add_subdirectory(./cpr ./cpr)
ENDIF()

add_subdirectory(./OpenCTM ./OpenCTM)
add_subdirectory(./parallel-hashmap ./parallel-hashmap)

IF(MR_EMSCRIPTEN)
  add_compile_definitions(GTEST_HAS_CXXABI_H_=0)
  add_subdirectory(./googletest ./googletest)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s USE_ZLIB=1")
  add_subdirectory(./libzip ./libzip)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s NO_DISABLE_EXCEPTION_CATCHING=1")
  add_subdirectory(./jsoncpp ./jsoncpp)
ELSE()
  set(CLIP_EXAMPLES OFF)
  set(CLIP_TESTS OFF)
  set(CLIP_X11_WITH_PNG OFF)
  set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
  add_subdirectory(./clip ./clip)
ENDIF()

add_subdirectory(./glad ./glad)